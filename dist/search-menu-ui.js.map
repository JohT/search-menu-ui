{"mappings":"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","sources":["<anon>","src/js/ponyfills/eventCurrentTargetPonyfill.js","src/js/ponyfills/selectionRangePonyfill.js","src/js/ponyfills/addEventListenerPonyfill.js","src/js/search-menu-ui.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire6f19\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire6f19\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"6Zl5q\", function(module, exports) {\n\"use strict\";\nvar $5168cbe7a8f000bf$var$module = $5168cbe7a8f000bf$var$module || {}; // Fallback for vanilla js without modules\n/**\n * @@namespace eventtarget\n */ var $5168cbe7a8f000bf$var$eventtarget = $5168cbe7a8f000bf$var$module.exports = {}; // Fallback for vanilla js without modules\n/**\n * @returns {Element} target of the event\n * @memberof eventtarget\n */ $5168cbe7a8f000bf$var$eventtarget.getEventTarget = function(event) {\n    if (typeof event.currentTarget !== \"undefined\" && event.currentTarget != null) return event.currentTarget;\n    if (typeof event.srcElement !== \"undefined\" && event.srcElement != null) return event.srcElement;\n    else throw new Error(\"Event doesn't contain bounded element: \" + event);\n};\n\n});\n\nparcelRegister(\"e8zLT\", function(module, exports) {\n\"use strict\";\nvar $a4ad8f7f94ee3163$var$module = $a4ad8f7f94ee3163$var$module || {}; // Fallback for vanilla js without modules\n/**\n * @namespace selectionrange\n */ var $a4ad8f7f94ee3163$var$selectionrange = $a4ad8f7f94ee3163$var$module.exports = {}; // Fallback for vanilla js without modules\n$a4ad8f7f94ee3163$var$selectionrange.moveCursorToEndOf = function(element) {\n    if (typeof element.setSelectionRange === \"function\") element.setSelectionRange(element.value.length, element.value.length);\n    else if (typeof element.selectionStart === \"number\" && typeof element.selectionEnd === \"number\") element.selectionStart = element.selectionEnd = element.value.length;\n    else if (typeof element.createTextRange === \"function\") {\n        var range = element.createTextRange();\n        range.collapse(true);\n        range.moveEnd(\"character\", element.value.length);\n        range.moveStart(\"character\", element.value.length);\n        range.select();\n    }\n};\n\n});\n\nparcelRegister(\"lTEEA\", function(module, exports) {\n\"use strict\";\nvar $ff0e44fa82d1ec2e$var$module = $ff0e44fa82d1ec2e$var$module || {}; // Fallback for vanilla js without modules\n/**\n * @@namespace eventlistener\n */ var $ff0e44fa82d1ec2e$var$eventlistener = $ff0e44fa82d1ec2e$var$module.exports = {}; // Fallback for vanilla js without modules\n/**\n * Adds an event listener/hander using \"addEventListener\" or whatever method the browser supports.\n * @param {String} eventName\n * @param {Element} element\n * @param {*} eventHandler\n * @memberof addeventlistener\n */ $ff0e44fa82d1ec2e$var$eventlistener.addEventListener = function(eventName, element, eventHandler) {\n    if (element.addEventListener) element.addEventListener(eventName, eventHandler, false);\n    else if (element.attachEvent) element.attachEvent(\"on\" + eventName, eventHandler);\n    else element[\"on\" + eventName] = eventHandler;\n};\n\n});\n\n/**\n * @file Search UI written in vanilla JavaScript. Menu structure for results. Filters are integrated as search results.\n * @version {@link https://github.com/JohT/search-menu-ui/releases/latest latest version}\n * @author JohT\n */ var $85319350d303889b$var$module = $85319350d303889b$var$datarestructorInternalCreateIfNotExists($85319350d303889b$var$module); // Fallback for vanilla js without modules\nfunction $85319350d303889b$var$datarestructorInternalCreateIfNotExists(objectToCheck) {\n    return objectToCheck || {};\n}\n/**\n * Contains the main ui component of the search menu ui.\n * @module searchmenu\n */ var $85319350d303889b$var$searchmenu = $85319350d303889b$var$module.exports = {}; // Export module for npm...\n$85319350d303889b$var$searchmenu.internalCreateIfNotExists = $85319350d303889b$var$datarestructorInternalCreateIfNotExists;\n\nvar $85319350d303889b$var$eventtarget = $85319350d303889b$var$eventtarget || (parcelRequire(\"6Zl5q\")); // supports vanilla js & npm\n\nvar $85319350d303889b$var$selectionrange = $85319350d303889b$var$selectionrange || (parcelRequire(\"e8zLT\")); // supports vanilla js & npm\n\nvar $85319350d303889b$var$eventlistener = $85319350d303889b$var$eventlistener || (parcelRequire(\"lTEEA\")); // supports vanilla js & npm\n/**\n * @typedef {Object} module:searchmenu.SearchViewDescription Describes a part of the search view (e.g. search result details).\n * @property {string} viewElementId id of the element (e.g. \"div\"), that contains the view with all list elements and their parent.\n * @property {string} listParentElementId id of the element (e.g. \"ul\"), that contains all list entries and is located inside the view.\n * @property {string} listEntryElementIdPrefix id prefix (followed by \"--\" and the index number) for every list entry\n * @property {string} [listEntryElementTag=\"li\"] element tag for list entries. defaults to \"li\".\n * @property {string} [listEntryTextTemplate=\"{{displayName}}: {{value}}\"] template for the text of each list entry\n * @property {string} [listEntrySummaryTemplate=\"{{summaries[0].displayName}}: {{summaries[0].value}}\"] template for the text of each list entry, if the data group \"summary\" exists.\n * @property {string} [listEntryStyleClassTemplate=\"{{view.listEntryElementIdPrefix}} {{category}}\"] template for the style class of each list entry.\n * @property {boolean} [isSelectableFilterOption=false] Specifies, if the list entry can be selected as filter option\n */ $85319350d303889b$var$searchmenu.SearchViewDescriptionBuilder = function() {\n    \"use strict\";\n    /**\n   * Builds a {@link module:searchmenu.SearchViewDescription}, which describes a part of the search menu called \"view\".  \n   * Examples for views are: results, details, filters, filter options. There might be more in future.\n   * \n   * The description contains the id's of the html elements, that will be used as \"binding\", to\n   * add elements like results. The \"viewElementId\" is the main parent (may be a \"div\" tag) of all view elements,\n   * that contains the \"listParentElementId\", which is the parent of the list entries (may be a \"ul\" tag).\n   * \n   * The text content of each entry is described by the text templates. \n   * \n   * Furthermore, the css style class can be given as a template, \n   * so search result field values can be used as a part of the style class.\n   * \n   * @param {module:searchmenu.SearchViewDescription} template optional parameter that contains a template to clone\n   * @constructs SearchViewDescriptionBuilder\n   * @alias module:searchmenu.SearchViewDescriptionBuilder\n   */ function SearchViewDescription(template) {\n        var defaultTemplate = \"{{displayName}}: {{value}}\";\n        var defaultSummaryTemplate = \"{{summaries[0].displayName}}: {{summaries[0].value}}\";\n        var defaultStyleClassTemplate = \"{{view.listEntryElementIdPrefix}} {{category}}\";\n        var defaultTag = \"li\";\n        /**\n     * @type {module:searchmenu.SearchViewDescription}\n     * @protected\n     */ this.description = {\n            viewElementId: template ? template.viewElementId : \"\",\n            listParentElementId: template ? template.listParentElementId : \"\",\n            listEntryElementIdPrefix: template ? template.listEntryElementIdPrefix : \"\",\n            listEntryElementTag: template ? template.listEntryElementTag : defaultTag,\n            listEntryTextTemplate: template ? template.listEntryTextTemplate : defaultTemplate,\n            listEntrySummaryTemplate: template ? template.listEntrySummaryTemplate : defaultSummaryTemplate,\n            listEntryStyleClassTemplate: template ? template.listEntryStyleClassTemplate : defaultStyleClassTemplate,\n            isSelectableFilterOption: template ? template.isSelectableFilterOption : false\n        };\n        /**\n     * ID of the element (e.g. \"div\"), that contains the view with all list elements and their parent.\n     *\n     * @param {string} value view element ID.\n     * @returns {module:searchmenu.SearchViewDescriptionBuilder}\n     */ this.viewElementId = function(value) {\n            this.description.viewElementId = withDefault(value, \"\");\n            return this;\n        };\n        /**\n     * ID of the element (e.g. \"ul\"), that contains all list entries and is located inside the view.\n     * @param {string} value parent element ID\n     * @returns {module:searchmenu.SearchViewDescriptionBuilder}\n     */ this.listParentElementId = function(value) {\n            this.description.listParentElementId = withDefault(value, \"\");\n            return this;\n        };\n        /**\n     * ID prefix (followed by \"--\" and the index number) for every list entry.\n     * @param {string} value ID prefix for every list entry element\n     * @returns {module:searchmenu.SearchViewDescriptionBuilder}\n     */ this.listEntryElementIdPrefix = function(value) {\n            //TODO could be checked to not contain the index separation chars \"--\"\n            this.description.listEntryElementIdPrefix = withDefault(value, \"\");\n            return this;\n        };\n        /**\n     * Element tag for list entries.\n     * @param {string} [value=\"li\"] tag for every list entry element\n     * @returns {module:searchmenu.SearchViewDescriptionBuilder}\n     */ this.listEntryElementTag = function(value) {\n            this.description.listEntryElementTag = withDefault(value, defaultTag);\n            return this;\n        };\n        /**\n     * Template for the text of each list entry.\n     * May contain variables in double curly brackets.\n     *\n     * @param {string} [value=\"{{displayName}}: {{value}}\"] list entry text template when there is no summary data group\n     * @returns {module:searchmenu.SearchViewDescriptionBuilder}\n     */ this.listEntryTextTemplate = function(value) {\n            this.description.listEntryTextTemplate = withDefault(value, defaultTemplate);\n            return this;\n        };\n        /**\n     * Template for the text of each list entry, if the data group \"summary\" exists.\n     * May contain variables in double curly brackets.\n     *\n     * @param {string} [value=\"{{summaries[0].displayName}}: {{summaries[0].value}}\"] list entry text template when there is a summary data group\n     * @returns {module:searchmenu.SearchViewDescriptionBuilder}\n     */ this.listEntrySummaryTemplate = function(value) {\n            this.description.listEntrySummaryTemplate = withDefault(value, defaultSummaryTemplate);\n            return this;\n        };\n        /**\n     * Template for the style classes of each list entry.\n     * May contain variables in double curly brackets.\n     * To use the property values of this view, prefix them with \"view\", e.g.: \"{{view.listEntryElementIdPrefix}}\".\n     *\n     * @param {string} [value=\"{{view.listEntryElementIdPrefix}} {{category}}\"] list entry style classes template\n     * @returns {module:searchmenu.SearchViewDescriptionBuilder}\n     */ this.listEntryStyleClassTemplate = function(value) {\n            this.description.listEntryStyleClassTemplate = withDefault(value, defaultStyleClassTemplate);\n            return this;\n        };\n        /**\n     * Specifies, if the list entry can be selected as filter option.\n     * @param {boolean} [value=false] if a list entry is selectable as filter option\n     * @returns {module:searchmenu.SearchViewDescriptionBuilder}\n     */ this.isSelectableFilterOption = function(value) {\n            this.description.isSelectableFilterOption = value === true;\n            return this;\n        };\n        /**\n     * Finishes the build of the description and returns its final (meant to be immutable) object.\n     * @returns {module:searchmenu.SearchViewDescription}\n     */ this.build = function() {\n            return this.description;\n        };\n    }\n    function withDefault(value, defaultValue) {\n        return isSpecifiedString(value) ? value : defaultValue;\n    }\n    function isSpecifiedString(value) {\n        return typeof value === \"string\" && value != null && value != \"\";\n    }\n    return SearchViewDescription;\n}();\n//TODO could provide the currently only described SearchUiData as own data structure in its own module.\n/**\n * @typedef {Object} module:searchmenu.SearchUiData \n * @property {String} [category=\"\"] name of the category. Default = \"\". Could contain a short domain name. (e.g. \"city\")\n * @property {String} fieldName field name that will be used e.g. as a search parameter name for filter options.\n * @property {String} [displayName=\"\"] readable display name for e.g. the list of results.\n * @property {String} [abbreviation=\"\"] one optional character, a symbol character or a short abbreviation of the category\n * @property {String} value value of the field\n * @property {module:searchmenu.SearchUiData[]} details if there are further details that will be displayed e.g. on mouse over\n * @property {module:searchmenu.SearchUiData[]} options contains filter options that can be selected as search parameters \n * @property {module:searchmenu.SearchUiData[]} default array with one element representing the default filter option (selected automatically)\n * @property {module:searchmenu.SearchUiData[]} summaries fields that are used to display the main search entry/result\n * @property {module:searchmenu.SearchUiData[]} urltemplate contains a single field with the value of the url template. Marks the entry as navigation target.\n */ /**\n * @callback module:searchmenu.ResolveTemplateFunction replaces variables with object properties.\n * @param {String} template may contain variables in double curly brackets. T\n * Typically supported variables would be: {{category}} {{fieldName}}, {{displayName}}, {{abbreviation}}, {{value}}\n * @return {String} string with resolved/replaced variables\n */ /**\n * @callback module:searchmenu.FieldsJson returns the fields as JSON\n * @return {String} JSON of all contained fields\n */ /**\n * This function will be called, when search results are available.\n * @callback SearchServiceResultAvailable\n * @param {Object} searchResultData already parsed data object containing the result of the search\n */ /**\n * This function will be called to trigger search (calling the search backend).\n * @callback module:searchmenu.SearchService\n * @param {Object} searchParameters object that contains all parameters as properties. It will be converted to JSON.\n * @param {module:searchmenu.SearchServiceResultAvailable} onSearchResultsAvailable will be called when search results are available.\n */ /**\n * This function converts the data from search backend to the structure needed by the search UI.\n * @callback module:searchmenu.DataConverter\n * @param {Object} searchData\n * @returns {module:searchmenu.SearchUiData} converted and structured data for search UI\n */ /**\n * This function replaces variables in double curly brackets with the property values of the given object.\n * @callback module:searchmenu.TemplateResolver\n * @param {String} templateToResolve may contain variables in double curly brackets e.g. like `\"{{searchtext}}\"`.\n * @param {Object} sourceObject the fields of this object are used to replace the variables in the template\n * @returns {module:searchmenu.SearchUiData} converted and structured data for search UI\n */ /**\n * This function adds predefined search parameters before search is triggered, e.g. constants, environment parameters, ...\n * @callback module:searchmenu.SearchParameterAdder\n * @param {Object} searchParametersObject\n */ /**\n * This function will be called when a new HTML is created.\n * @callback module:searchmenu.ElementCreatedListener\n * @param {Element} newlyCreatedElement\n * @param {boolean} isParent true, if it is the created parent. false, if it is a child within the created parent. \n */ /**\n * This function will be called to navigate to a selected search result url.\n * @callback module:searchmenu.NavigateToFunction\n * @param {String} destinationUrl\n */ /**\n * @typedef {Object} module:searchmenu.SearchMenuConfig\n * @property {module:searchmenu.SearchService} triggerSearch triggers search (backend)\n * @property {module:searchmenu.DataConverter} convertData converts search result data to search ui data. Lets data through unchanged by default.\n * @property {module:searchmenu.searchParameterAdder} addPredefinedParametersTo adds custom search parameters \n * @property {module:searchmenu.ElementCreatedListener} onCreatedElement this function will be called when a new HTML is created.\n * @property {module:searchmenu.NavigateToFunction} navigateTo this function will be called to navigate to a selected search result url.\n * @property {string} searchAreaElementId id of the whole search area (default=\"searcharea\")\n * @property {string} inputElementId id of the search input field (default=\"searchinputtext\")\n * @property {module:searchmenu.SearchViewDescription} resultsView describes the main view containing the search results\n * @property {module:searchmenu.SearchViewDescription} detailView describes the details view\n * @property {module:searchmenu.SearchViewDescription} filterOptionsView describes the filter options view\n * @property {module:searchmenu.SearchViewDescription} filtersView describes the filters view\n * @property {string} [waitBeforeClose=700] timeout in milliseconds when search is closed after blur (loss of focus) (default=700)\n * @property {string} [waitBeforeSearch=500] time in milliseconds to wait until typing is finished and search starts (default=500)\n * @property {string} [waitBeforeMouseOver=700] time in milliseconds to wait until mouse over opens details (default=700)\n */ $85319350d303889b$var$searchmenu.SearchMenuAPI = function() {\n    \"use strict\";\n    /**\n   * Search Menu UI API\n   * @constructs SearchMenuAPI\n   * @alias module:searchmenu.SearchMenuAPI\n   */ function SearchMenuApiBuilder() {\n        this.config = {\n            triggerSearch: function() {\n                throw new Error(\"search service needs to be defined.\");\n            },\n            convertData: function(sourceData) {\n                return sourceData;\n            },\n            resolveTemplate: function() {\n                throw new Error(\"template resolver needs to be defined.\");\n            },\n            addPredefinedParametersTo: function() {\n            //does nothing if not specified otherwise\n            },\n            onCreatedElement: function() {\n            //does nothing if not specified otherwise\n            },\n            navigateTo: function(destinationUrl) {\n                window.location.href = destinationUrl;\n            },\n            createdElementListeners: [],\n            searchAreaElementId: \"searcharea\",\n            inputElementId: \"searchinputtext\",\n            searchTextParameterName: \"searchtext\",\n            resultsView: defaultResultsView(),\n            detailView: defaultDetailView(),\n            filterOptionsView: defaultFilterOptionsView(),\n            filtersView: defaultFiltersView(),\n            waitBeforeClose: 700,\n            waitBeforeSearch: 500,\n            waitBeforeMouseOver: 700\n        };\n        /**\n     * Defines the search service function, that will be called whenever search is triggered.\n     * @param {module:searchmenu.SearchService} service function that will be called to trigger search (backend).\n     * @returns module:searchmenu.SearchMenuAPI\n     */ this.searchService = function(service) {\n            this.config.triggerSearch = service;\n            return this;\n        };\n        /**\n     * Defines the converter, that converts search result data to search ui data.\n     * Without setting a data converter, data is taken directly from the backend service,\n     * that needs to provide the results in the search menu data structure.\n     * @param {module:searchmenu.DataConverter} converter function that will be called to create the search menu data structure\n     * @returns module:searchmenu.SearchMenuAPI\n     */ this.dataConverter = function(converter) {\n            this.config.convertData = converter;\n            return this;\n        };\n        /**\n     * Defines the template resolver, that replaces variables in double curly brackets with the property values of the given object.\n     * @param {module:searchmenu.TemplateResolver} resolver function that will be called to resolve strings with variables.\n     * @returns module:searchmenu.SearchMenuAPI\n     */ this.templateResolver = function(resolver) {\n            this.config.resolveTemplate = resolver;\n            return this;\n        };\n        /**\n     * Defines the function, that adds predefined (fixed, constant, environmental) search parameters\n     * to the first parameter object.\n     * @param {module:searchmenu.SearchParameterAdder} adder function that will be called to before search is triggered.\n     * @returns module:searchmenu.SearchMenuAPI\n     */ this.addPredefinedParametersTo = function(adder) {\n            this.config.addPredefinedParametersTo = adder;\n            return this;\n        };\n        /**\n     * Sets the listener, that will be called, when a new HTML element was created.\n     * @param {module:searchmenu.ElementCreatedListener} listener\n     * @returns module:searchmenu.SearchMenuAPI\n     */ this.setElementCreatedHandler = function(listener) {\n            this.config.onCreatedElement = listener;\n            return this;\n        };\n        /**\n     * Adds another listener, that will be called, when a new HTML element was created.\n     * @param {module:searchmenu.ElementCreatedListener} listener\n     * @returns module:searchmenu.SearchMenuAPI\n     */ this.addElementCreatedHandler = function(listener) {\n            this.config.createdElementListeners.push(listener);\n            return this;\n        };\n        /**\n     * Adds the given style class when an element receives focus.\n     * This is done for every element that is created dynamically (e.g. search results and filters).\n     * It is only meant to be used for browsers like old IE5 ones that doesn't support focus pseudo style class.\n     *\n     * @param {String} [focusStyleClassName=\"focus\"]\n     * @returns module:searchmenu.SearchMenuAPI\n     */ this.addFocusStyleClassOnEveryCreatedElement = function(focusStyleClassName) {\n            var className = withDefault(focusStyleClassName, \"focus\");\n            this.addElementCreatedHandler(function(element, isParent) {\n                if (!isParent) return;\n                addEvent(\"focus\", element, function(event) {\n                    addClass(className, getEventTarget(event));\n                });\n                addEvent(\"blur\", element, function(event) {\n                    removeClass(className, getEventTarget(event));\n                });\n            });\n            return this;\n        };\n        /**\n     * Sets the element ID of the parent, that represents the whole search menu component.\n     * @param {String} [id=\"searcharea\"] id of the parent element, that represents the whole search menu component.\n     * @returns module:searchmenu.SearchMenuAPI\n     */ this.searchAreaElementId = function(id) {\n            this.config.searchAreaElementId = withDefault(id, \"searcharea\");\n            return this;\n        };\n        /**\n     * Sets the input search text element ID,.\n     * @param {String} [id=\"searchinputtext\"] id of the input element, that contains the search text.\n     * @returns module:searchmenu.SearchMenuAPI\n     */ this.inputElementId = function(id) {\n            this.config.inputElementId = withDefault(id, \"searchinputtext\");\n            return this;\n        };\n        /**\n     * Sets the name of the backend search service parameter, that contains the input search text.\n     * @param {String} [value=\"searchtext\"] name of the parameter, that contains the input search text and that can be used as a variable inside the url or body template for the backend service\n     * @returns module:searchmenu.SearchMenuAPI\n     */ this.searchTextParameterName = function(value) {\n            this.config.searchTextParameterName = withDefault(value, \"searchtext\");\n            return this;\n        };\n        /**\n     * Sets the view, that is used to display all search results.  \n     * The default view settings can be found [here]{@link module:searchmenu.SearchMenuAPI.defaultResultsView}.\n     *\n     * @param {module:searchmenu.SearchViewDescription} view connects the part of the search menu, that displays all search results\n     * @returns module:searchmenu.SearchMenuAPI\n     * @see {@link module:searchmenu.SearchMenuAPI.defaultResultsView}\n     */ this.resultsView = function(view) {\n            this.config.resultsView = view;\n            return this;\n        };\n        /**\n     * Sets the view, that is used to display details of a selected search result.  \n     * The default view settings can be found [here]{@link module:searchmenu.SearchMenuAPI.defaultDetailView}.\n     *\n     * @param {module:searchmenu.SearchViewDescription} view connects the part of the search menu, that displays details of a selected search result\n     * @returns module:searchmenu.SearchMenuAPI\n     * @see {@link module:searchmenu.SearchMenuAPI.defaultDetailView}\n     */ this.detailView = function(view) {\n            this.config.detailView = view;\n            return this;\n        };\n        /**\n     * Sets the view, that is used to display currently selected filter options.   \n     * The default view settings can be found [here]{@link module:searchmenu.SearchMenuAPI.defaultFilterOptionsView}.\n     *\n     * @param {module:searchmenu.SearchViewDescription} view connects the part of the search menu, that displays currently selected filter options\n     * @returns module:searchmenu.SearchMenuAPI\n     * @see {@link module:searchmenu.SearchMenuAPI.defaultFilterOptionsView}\n     */ this.filterOptionsView = function(view) {\n            this.config.filterOptionsView = view;\n            return this;\n        };\n        /**\n     * Sets the view, that is used to display search results, that represent filter options.   \n     * The default view settings can be found [here]{@link module:searchmenu.SearchMenuAPI.defaultFiltersView}.\n     *\n     * @param {module:searchmenu.SearchViewDescription} view connects the part of the search menu, that displays search results, that represent filter options\n     * @returns module:searchmenu.SearchMenuAPI\n     * @see {@link module:searchmenu.SearchMenuAPI.defaultFiltersView}\n     */ this.filtersView = function(view) {\n            this.config.filtersView = view;\n            return this;\n        };\n        /**\n     * Sets the time the search menu will remain open, when it has lost focus.\n     * Prevents the menu to disappear while using it.\n     * @param {number} [ms=700] time in milliseconds the search menu will remain open until it is closed after loosing focus.\n     * @returns module:searchmenu.SearchMenuAPI\n     */ this.waitBeforeClose = function(ms) {\n            this.config.waitBeforeClose = ms;\n            return this;\n        };\n        /**\n     * Sets the time to wait before the search service is called.\n     * Prevents calls to the search backend while changing the search input.\n     * @param {number} [ms=500] time in milliseconds to wait before the search service is called\n     * @returns module:searchmenu.SearchMenuAPI\n     */ this.waitBeforeSearch = function(ms) {\n            this.config.waitBeforeSearch = ms;\n            return this;\n        };\n        /**\n     * Sets the time to  wait before search result details are opened on mouse over.\n     * Doesn't affect keyboard selection, which will immediately open the search details.\n     * Prevents details to open on search results, that are only touched by the mouse pointer for a short period of time.\n     * @param {number} [ms=700] time in milliseconds to wait before search result details are opened on mouse over.\n     * @returns module:searchmenu.SearchMenuAPI\n     */ this.waitBeforeMouseOver = function(ms) {\n            this.config.waitBeforeMouseOver = ms;\n            return this;\n        };\n        /**\n     * Finishes the configuration and creates the {@link module:searchmenu.SearchMenuUI}.\n     * @returns module:searchmenu.SearchMenuUI\n     */ this.start = function() {\n            var config = this.config;\n            if (config.createdElementListeners.length > 0) this.setElementCreatedHandler(function(element, isParent) {\n                var index = 0;\n                for(index = 0; index < config.createdElementListeners.length; index += 1)config.createdElementListeners[index](element, isParent);\n            });\n            return new $85319350d303889b$var$searchmenu.SearchMenuUI(config);\n        };\n    }\n    /**\n   * Contains the default settings for the results view.\n   * - viewElementId = \"`searchresults`\"\n   * - listParentElementId = \"`searchmatches`\"\n   * - listEntryElementIdPrefix = \"`result`\"\n   * - listEntryTextTemplate = \"`{{abbreviation}} {{displayName}}`\"\n   * - listEntrySummaryTemplate = \"`{{summaries[0].abbreviation}} <b>{{summaries[1].value}}</b><br>{{summaries[2].value}}: {{summaries[0].value}}`\"\n   *\n   * @returns {module:searchmenu.SearchViewDescription} default settings for the results view\n   * @protected\n   * @memberof module:searchmenu.SearchMenuAPI\n   */ function defaultResultsView() {\n        return new $85319350d303889b$var$searchmenu.SearchViewDescriptionBuilder().viewElementId(\"searchresults\").listParentElementId(\"searchmatches\").listEntryElementIdPrefix(\"result\").listEntryTextTemplate(\"{{abbreviation}} {{displayName}}\").listEntrySummaryTemplate(\"{{summaries[0].abbreviation}} <b>{{summaries[1].value}}</b><br>{{summaries[2].value}}: {{summaries[0].value}}\").build();\n    }\n    /**\n   * Contains the default settings for the details view.\n   * - viewElementId = \"`searchdetails`\"\n   * - listParentElementId = \"`searchdetailentries`\"\n   * - listEntryElementIdPrefix = \"`detail`\"\n   * - listEntryTextTemplate = \"`<b>{{displayName}}:</b> {{value}}`\"\n   *\n   * @returns {module:searchmenu.SearchViewDescription} default settings for the details view\n   * @protected\n   * @memberof module:searchmenu.SearchMenuAPI\n   */ function defaultDetailView() {\n        return new $85319350d303889b$var$searchmenu.SearchViewDescriptionBuilder().viewElementId(\"searchdetails\").listParentElementId(\"searchdetailentries\").listEntryElementIdPrefix(\"detail\").listEntryTextTemplate(\"<b>{{displayName}}:</b> {{value}}\").build();\n    }\n    /**\n   * Contains the default settings for the filter options view.\n   * - viewElementId = \"`searchfilteroptions`\"\n   * - listParentElementId = \"`searchfilteroptionentries`\"\n   * - listEntryElementIdPrefix = \"`filter`\"\n   * - listEntryTextTemplate = \"`{{value}}`\"\n   * - listEntrySummaryTemplate = \"`{{summaries[0].value}}`\"\n   * - isSelectableFilterOption = `true`\n   *\n   * @returns {module:searchmenu.SearchViewDescription} default settings for the filter options view\n   * @protected\n   * @memberof module:searchmenu.SearchMenuAPI\n   */ function defaultFilterOptionsView() {\n        return new $85319350d303889b$var$searchmenu.SearchViewDescriptionBuilder().viewElementId(\"searchfilteroptions\").listParentElementId(\"searchfilteroptionentries\").listEntryElementIdPrefix(\"filter\").listEntryTextTemplate(\"{{value}}\").listEntrySummaryTemplate(\"{{summaries[0].value}}\").isSelectableFilterOption(true).build();\n    }\n    /**\n   * Contains the default settings for the filters view.\n   * - viewElementId = \"`searchresults`\"\n   * - listParentElementId = \"`searchfilters`\"\n   * - listEntryElementIdPrefix = \"`filter`\"\n   * - isSelectableFilterOption = `true`\n   * @returns {module:searchmenu.SearchViewDescription} default settings for the filters view\n   * @protected\n   * @memberof module:searchmenu.SearchMenuAPI\n   */ function defaultFiltersView() {\n        return new $85319350d303889b$var$searchmenu.SearchViewDescriptionBuilder().viewElementId(\"searchresults\").listParentElementId(\"searchfilters\").listEntryElementIdPrefix(\"filter\").isSelectableFilterOption(true).build();\n    }\n    function addEvent(eventName, element, eventHandler) {\n        $85319350d303889b$var$eventlistener.addEventListener(eventName, element, eventHandler);\n    }\n    function getEventTarget(event) {\n        return $85319350d303889b$var$eventtarget.getEventTarget(event);\n    }\n    function addClass(classToAdd, element) {\n        removeClass(classToAdd, element);\n        var separator = element.className.length > 0 ? \" \" : \"\";\n        element.className += separator + classToAdd;\n    }\n    function removeClass(classToRemove, element) {\n        var regex = new RegExp(\"\\\\s?\\\\b\" + classToRemove + \"\\\\b\", \"gi\");\n        element.className = element.className.replace(regex, \"\");\n    }\n    function withDefault(value, defaultValue) {\n        return isSpecifiedString(value) ? value : defaultValue;\n    }\n    function isSpecifiedString(value) {\n        return typeof value === \"string\" && value != null && value != \"\";\n    }\n    return SearchMenuApiBuilder;\n}();\n$85319350d303889b$var$searchmenu.SearchMenuUI = function() {\n    \"use strict\";\n    /**\n   * Search Menu UI.\n   *\n   * Contains the \"behavior\" of the search bar. It submits the search query,\n   * parses the results, displays matches and filters and responds to\n   * clicks and key presses.\n   * Further resources:\n   * - [API]{@link module:searchmenu.SearchMenuAPI}\n   * - [Configuration]{@link module:searchmenu.SearchMenuConfig}\n   * \n   * @constructs SearchMenuUI\n   * @alias module:searchmenu.SearchMenuUI\n   * @see {@link module:searchmenu.SearchMenuAPI}\n   * @see {@link module:searchmenu.SearchMenuConfig}\n   */ var instance = function(config) {\n        /**\n     * Configuration.\n     * @type {module:searchmenu.SearchMenuConfig}\n     * @protected \n     */ this.config = config;\n        /**\n     * Search text that correspondents to the currently shown results.\n     * @type {String}\n     * @protected \n     */ this.currentSearchText = \"\";\n        /**\n     * Timer that is used to wait before the menu is closed.\n     * @type {Timer}\n     * @protected \n     */ this.focusOutTimer = null;\n        /**\n     * Timer that is used to wait before the search service is called.\n     * @type {Timer}\n     * @protected \n     */ this.waitBeforeSearchTimer = null;\n        var search = document.getElementById(config.inputElementId);\n        onEscapeKey(search, function(event) {\n            getEventTarget(event).value = \"\";\n            hideMenu(config);\n        });\n        onArrowDownKey(search, handleEventWithConfig(config, focusFirstResult));\n        addEvent(\"keyup\", search, function(event) {\n            if (this.waitBeforeSearchTimer !== null) clearTimeout(this.waitBeforeSearchTimer);\n            var newSearchText = getEventTarget(event).value;\n            this.waitBeforeSearchTimer = window.setTimeout(function() {\n                if (newSearchText !== this.currentSearchText || this.currentSearchText === \"\") {\n                    updateSearch(newSearchText, config);\n                    this.currentSearchText = newSearchText;\n                }\n            }, config.waitBeforeSearch);\n        });\n        var searchareaElement = document.getElementById(config.searchAreaElementId);\n        addEvent(\"focusin\", searchareaElement, function() {\n            var searchInputElement = document.getElementById(config.inputElementId);\n            if (searchInputElement.value !== \"\") {\n                if (this.focusOutTimer != null) clearTimeout(this.focusOutTimer);\n                //TODO should only show results if there are some\n                //TODO could add a \"spinner\" when search is running\n                show(config.resultsView.viewElementId);\n            }\n        });\n        addEvent(\"focusout\", searchareaElement, function() {\n            this.focusOutTimer = window.setTimeout(function() {\n                hideMenu(config);\n            }, config.waitBeforeClose);\n        });\n    };\n    function updateSearch(searchText, config) {\n        var matchList = document.getElementById(config.resultsView.listParentElementId);\n        matchList.innerHTML = \"\";\n        if (searchText.length === 0) {\n            hideMenu(config);\n            return;\n        }\n        show(config.resultsView.viewElementId);\n        getSearchResults(searchText, config);\n    }\n    function getSearchResults(searchText, config) {\n        //TODO should \"retrigger\" search when new filter options are selected (after each?)\n        var searchParameters = getSelectedOptions(config.filtersView.listParentElementId);\n        searchParameters[config.searchTextParameterName] = searchText;\n        config.addPredefinedParametersTo(searchParameters);\n        //TODO could provide optional build in search text highlighting\n        config.triggerSearch(searchParameters, function(jsonResult) {\n            displayResults(config.convertData(jsonResult), config);\n        });\n    //TODO should provide some info if search fails (service temporary unavailable, ...)\n    }\n    function displayResults(jsonResults, config) {\n        var index = 0;\n        for(index = 0; index < jsonResults.length; index += 1)addResult(jsonResults[index], index + 1, config);\n    }\n    function addResult(entry, i, config) {\n        var listElementId = config.resultsView.listEntryElementIdPrefix + \"--\" + i;\n        var resultElementText = createListEntryInnerHtmlText(entry, config.resultsView, listElementId, config.resolveTemplate);\n        var resultElement = createListEntryElement(entry, config.resultsView, listElementId, resultElementText);\n        addClass(resolveStyleClasses(entry, config.resultsView, config.resolveTemplate), resultElement);\n        forEachIdElementIncludingChildren(resultElement, config.onCreatedElement);\n        if (isMenuEntryWithFurtherDetails(entry)) {\n            onMenuEntrySelected(resultElement, handleEventWithEntriesAndConfig(entry.details, config, selectSearchResultToDisplayDetails));\n            onMouseOverDelayed(resultElement, config.waitBeforeMouseOver, handleEventWithEntriesAndConfig(entry.details, config, selectSearchResultToDisplayDetails));\n            onMenuEntryChosen(resultElement, function() {\n                var selectedUrlTemplate = getSelectedUrlTemplate(config.filtersView.listParentElementId, getPropertyValueWithUndefinedDefault(entry, \"category\", \"\"));\n                if (selectedUrlTemplate) {\n                    //TODO should add domain, baseurl, ... as data sources for variables to use inside the template\n                    var targetURL = config.resolveTemplate(selectedUrlTemplate, entry);\n                    config.navigateTo(targetURL);\n                }\n            });\n        }\n        if (isMenuEntryWithOptions(entry)) {\n            var options = entry.options;\n            //TODO should support details for filter options.\n            //TODO could skip sub menu, if there is only one option (with/without being default).\n            //TODO could be used for constants (pre selected single filter options) like \"tenant-number\", \"current-account\"\n            //TODO could remove the original search result filter when the default option is pre selected (and its options are copied).\n            if (isMenuEntryWithDefault(entry)) {\n                options = insertAtBeginningIfMissing(entry.options, entry[\"default\"][0], equalProperties([\n                    \"value\"\n                ]));\n                var filterOptionsElement = createFilterOption(entry[\"default\"][0], options, config.filtersView, config);\n                addDefaultFilterOptionModificationHandler(filterOptionsElement, options, config);\n            }\n            onMenuEntrySelected(resultElement, handleEventWithEntriesAndConfig(entry.options, config, selectSearchResultToDisplayFilterOptions));\n            onMenuEntryChosen(resultElement, handleEventWithEntriesAndConfig(entry.options, config, selectSearchResultToDisplayFilterOptions));\n        }\n        addMainMenuNavigationHandlers(resultElement, config);\n    }\n    function equalProperties(propertyNames) {\n        return function(existingObject, newObject) {\n            var index;\n            for(index = 0; index < propertyNames.length; index += 1){\n                if (existingObject[propertyNames[index]] != newObject[propertyNames[index]]) return false;\n            }\n            return true;\n        };\n    }\n    /**\n   * Adds the given entry at be beginning of the given array of entries if it's missing.\n   * The equalFunction determines, if the new value is missing (returns false) or not (returns true).\n   * If the entry to add is null, the entries are returned directly.\n   *\n   * @param {Object[]} entries\n   * @param {Object} entryToAdd\n   * @param {boolean} equalMatcher takes the existing and the new entry as parameters and returns true if they are considered \"equal\".\n   * @returns {Object[]}\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function insertAtBeginningIfMissing(entries, entryToAdd, equalMatcher) {\n        if (!entryToAdd) return entries;\n        var index;\n        var alreadyContainsEntryToAdd = false;\n        for(index = 0; index < entries.length; index += 1)if (equalMatcher(entries[index], entryToAdd)) {\n            alreadyContainsEntryToAdd = true;\n            break;\n        }\n        if (alreadyContainsEntryToAdd) return entries;\n        var result = [];\n        result.push(entryToAdd);\n        for(index = 0; index < entries.length; index += 1)result.push(entries[index]);\n        return result;\n    }\n    function isMenuEntryWithFurtherDetails(entry) {\n        return typeof entry.details !== \"undefined\";\n    }\n    function isMenuEntryWithOptions(entry) {\n        return typeof entry.options !== \"undefined\";\n    }\n    function isMenuEntryWithDefault(entry) {\n        return typeof entry[\"default\"] !== \"undefined\";\n    }\n    /**\n   * Reacts to input events (keys, ...) to navigate through main menu entries.\n   *\n   * @param {Element} element to add event handlers\n   * @param {SearchMenuConfig} config search configuration\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function addMainMenuNavigationHandlers(element, config) {\n        onArrowDownKey(element, handleEventWithConfig(config, focusNextSearchResult));\n        onArrowUpKey(element, handleEventWithConfig(config, focusPreviousSearchResult));\n        onEscapeKey(element, handleEventWithConfig(config, focusSearchInput));\n        onArrowLeftKey(element, handleEventWithConfig(config, closeAssociatedSubMenus));\n    }\n    /**\n   * Reacts to input events (keys, ...) to navigate through sub menu entries.\n   *\n   * @param {Element} element to add event handlers\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function addSubMenuNavigationHandlers(element) {\n        onArrowDownKey(element, focusNextMenuEntry);\n        onArrowUpKey(element, focusPreviousMenuEntry);\n        onArrowLeftKey(element, returnToMainMenu);\n        onEscapeKey(element, returnToMainMenu);\n    }\n    function onMenuEntrySelected(element, eventHandler) {\n        onSpaceKey(element, eventHandler);\n        onArrowRightKey(element, eventHandler);\n    }\n    function onMenuEntryChosen(element, eventHandler) {\n        addEvent(\"mousedown\", element, eventHandler);\n        onEnterKey(element, eventHandler);\n    }\n    function onSubMenuEntrySelected(element, eventHandler) {\n        addEvent(\"mousedown\", element, eventHandler);\n        onEnterKey(element, eventHandler);\n        onSpaceKey(element, eventHandler);\n    }\n    function onFilterMenuEntrySelected(element, eventHandler) {\n        addEvent(\"mousedown\", element, eventHandler);\n        onEnterKey(element, eventHandler);\n        onArrowRightKey(element, eventHandler);\n    }\n    function onFilterMenuEntryRemoved(element, eventHandler) {\n        onDeleteKey(element, eventHandler);\n        onBackspaceKey(element, eventHandler);\n    //TODO should also be possible with mouse (without using keys)\n    }\n    /**\n   * @param {SearchMenuConfig} config search configuration\n   * @param {EventListener} eventHandler event handler\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function handleEventWithConfig(config, eventHandler) {\n        return function(event) {\n            eventHandler(event, config);\n        };\n    }\n    /**\n   * @param {Object[]} entries raw data of the entry\n   * @param {module:searchmenu.SearchMenuConfig} config search configuration\n   * @param {EventListener} eventHandler event handler\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function handleEventWithEntriesAndConfig(entries, config, eventHandler) {\n        return function(event) {\n            eventHandler(event, entries, config);\n        };\n    }\n    /**\n   * This callback will be called, if there is not next or previous menu entry to navigate to.\n   * The implementation can decide, what to do using the given id properties.\n   *\n   * @callback module:searchmenu.MenuEntryNotFoundHandler\n   * @param {module:searchmenu.ListElementIdProperties} properties of the element id\n   */ /**\n   * This function returns the ID for the first sub menu entry using the given type name (= name of the sub menu).\n   *\n   * @callback module:searchmenu.SubMenuId\n   * @param {string} type name of the sub menu entries\n   */ /**\n   * @typedef {Object} module:searchmenu.ListElementIdProperties\n   * @property {id} id Original ID\n   * @property {string} type Type of the list element\n   * @property {number} index Index of the list element\n   * @property {string} previousId ID of the previous list element\n   * @property {string} nextId ID of the next list element\n   * @property {string} firstId ID of the first list element\n   * @property {string} lastId ID of the last list element\n   * @property {module:searchmenu.SubMenuId} subMenuId  Returns the ID of the first sub menu entry (with the given type name as parameter)\n   * @property {string} mainMenuId ID of the main menu entry e.g. to leave the sub menu. Equals to the id, if it already is a main menu entry\n   * @property {boolean} hiddenFieldsId ID of the embedded hidden field, that contains all public information of the described entry as JSON.\n   * @property {boolean} hiddenFields Parses the JSON inside the \"hiddenFieldsId\"-Element and returns the object with the described entry.\n   * @property {boolean} isFirstElement true, if it is the first element in the list\n   * @property {boolean} isSubMenu true, if it is the ID of an sub menu entry\n   */ /**\n   * Extracts properties like type and index\n   * from the given list element id string.\n   *\n   * @param {string} id\n   * @return {module:searchmenu.ListElementIdProperties} list element id properties\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function extractListElementIdProperties(id) {\n        var separator = \"--\";\n        var splittedId = id.split(separator);\n        if (splittedId.length < 2) console.log(\"expected at least one '\" + separator + \"' separator inside the id \" + id);\n        var extractedMainMenuType = splittedId[0];\n        var extractedMainMenuIndex = parseInt(splittedId[1]);\n        var extractedType = splittedId[splittedId.length - 2];\n        var extractedIndex = parseInt(splittedId[splittedId.length - 1]);\n        var idWithoutIndex = id.substring(0, id.lastIndexOf(extractedIndex) - separator.length);\n        return {\n            id: id,\n            type: extractedType,\n            index: extractedIndex,\n            previousId: idWithoutIndex + separator + (extractedIndex - 1),\n            nextId: idWithoutIndex + separator + (extractedIndex + 1),\n            firstId: idWithoutIndex + separator + \"1\",\n            lastId: idWithoutIndex + separator + document.getElementById(id).parentElement.childNodes.length,\n            mainMenuId: extractedMainMenuType + separator + extractedMainMenuIndex,\n            mainMenuIndex: extractedMainMenuIndex,\n            hiddenFieldsId: id + separator + \"fields\",\n            isFirstElement: extractedIndex <= 1,\n            isSubMenu: splittedId.length > 3,\n            subMenuId: function(typeName) {\n                return id + separator + typeName + separator + \"1\";\n            },\n            replaceMainMenuIndex: function(newIndex) {\n                var newMainMenuIndex = extractedMainMenuType + separator + newIndex;\n                return newMainMenuIndex + id.substring(this.mainMenuId.length);\n            },\n            getNewIndexAfterRemovedMainMenuIndex: function(removedIndex) {\n                if (extractedMainMenuIndex < removedIndex) return id;\n                if (extractedMainMenuIndex == removedIndex) throw new Error(\"index \" + removedIndex + \" should had been removed.\");\n                return this.replaceMainMenuIndex(extractedMainMenuIndex - 1);\n            },\n            hiddenFields: function() {\n                var hiddenFieldsElement = document.getElementById(id + separator + \"fields\");\n                var hiddenFieldsJson = getPropertyValueWithUndefinedDefault(hiddenFieldsElement, \"textContent\", hiddenFieldsElement.innerText);\n                return JSON.parse(hiddenFieldsJson);\n            }\n        };\n    }\n    function focusSearchInput(event, config) {\n        var resultEntry = getEventTarget(event);\n        var inputElement = document.getElementById(config.inputElementId);\n        resultEntry.blur();\n        inputElement.focus();\n        $85319350d303889b$var$selectionrange.moveCursorToEndOf(inputElement);\n        preventDefaultEventHandling(event); //skips cursor position change on key up once\n        hideSubMenus(config);\n        return inputElement;\n    }\n    function focusFirstResult(event, config) {\n        var selectedElement = getEventTarget(event);\n        var firstResult = document.getElementById(config.resultsView.listEntryElementIdPrefix + \"--1\");\n        if (firstResult) {\n            selectedElement.blur();\n            firstResult.focus();\n        }\n    }\n    function focusNextSearchResult(event, config) {\n        focusNextMenuEntry(event, function(menuEntryIdProperties) {\n            var next = null;\n            if (menuEntryIdProperties.type === config.resultsView.listEntryElementIdPrefix) //select first filter entry after last result/match entry\n            //TODO could find a better way (without config?) to navigate from last search result to first options/filter entry\n            next = document.getElementById(config.filterOptionsView.listEntryElementIdPrefix + \"--1\");\n            if (next === null) //select first result/match entry after last filter entry (or whenever nothing is found)\n            next = document.getElementById(config.resultsView.listEntryElementIdPrefix + \"--1\");\n            return next;\n        });\n        hideSubMenus(config);\n    }\n    function focusPreviousSearchResult(event, config) {\n        focusPreviousMenuEntry(event, function(menuEntryIdProperties) {\n            var previous = null;\n            if (menuEntryIdProperties.type === config.filterOptionsView.listEntryElementIdPrefix) {\n                //select last result entry when arrow up is pressed on first filter entry\n                //TODO could find a better way (without config?) to navigate from first options/filter entry to last search result?\n                var resultElementsCount = getListElementCountOfType(config.resultsView.listEntryElementIdPrefix);\n                previous = document.getElementById(config.resultsView.listEntryElementIdPrefix + \"--\" + resultElementsCount);\n            }\n            if (previous === null) //select input, if there is no previous entry.\n            return focusSearchInput(event, config);\n            return previous;\n        });\n        hideSubMenus(config);\n    }\n    /**\n   * Selects and focusses the next menu entry.\n   *\n   * @param {Event} event\n   * @param {module:searchmenu.MenuEntryNotFoundHandler} onMissingNext is called, if no \"next\" entry could be found.\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function focusNextMenuEntry(event, onMissingNext) {\n        var menuEntry = getEventTarget(event);\n        var menuEntryIdProperties = extractListElementIdProperties(menuEntry.id);\n        if (menuEntryIdProperties.isSubMenu) preventDefaultEventHandling(event); //skips e.g. scrolling whole screen down when focus is inside sub menu\n        var next = document.getElementById(menuEntryIdProperties.nextId);\n        if (next == null && typeof onMissingNext === \"function\") next = onMissingNext(menuEntryIdProperties);\n        if (next == null) next = document.getElementById(menuEntryIdProperties.firstId);\n        if (next != null) {\n            menuEntry.blur();\n            next.focus();\n        }\n    }\n    /**\n   * Selects and focusses the previous menu entry.\n   *\n   * @param {Event} event\n   * @param {module:searchmenu.MenuEntryNotFoundHandler} onMissingPrevious is called, if no \"previous\" entry could be found.\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function focusPreviousMenuEntry(event, onMissingPrevious) {\n        var menuEntry = getEventTarget(event);\n        var menuEntryIdProperties = extractListElementIdProperties(menuEntry.id);\n        if (menuEntryIdProperties.isSubMenu) preventDefaultEventHandling(event); //skips e.g. scrolling whole screen up when focus is inside sub menu\n        var previous = document.getElementById(menuEntryIdProperties.previousId);\n        if (previous == null && typeof onMissingPrevious === \"function\") previous = onMissingPrevious(menuEntryIdProperties);\n        if (previous == null) previous = document.getElementById(menuEntryIdProperties.lastId);\n        if (previous != null) {\n            menuEntry.blur();\n            previous.focus();\n        }\n    }\n    /**\n   * Gets called when a filter option is selected and copies it into the filter view, where all selected filters are collected.\n   * @param {Event} event \n   * @param {DescribedEntry} entries \n   * @param {module:searchmenu.SearchMenuConfig} config \n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function selectFilterOption(event, entries, config) {\n        var selectedEntry = getEventTarget(event);\n        var selectedEntryData = findSelectedEntry(selectedEntry.id, entries, equalProperties([\n            \"fieldName\",\n            \"value\"\n        ]));\n        var filterOptionsElement = createFilterOption(selectedEntryData, entries, config.filtersView, config);\n        //TODO could detect default entry if necessary and call \"addDefaultFilterOptionModificationHandler\" instead\n        addFilterOptionModificationHandler(filterOptionsElement, entries, config);\n        preventDefaultEventHandling(event);\n        returnToMainMenu(event);\n    }\n    function createFilterOption(selectedEntryData, entries, view, config) {\n        var filterElements = getListElementCountOfType(view.listEntryElementIdPrefix);\n        var filterElementId = view.listEntryElementIdPrefix + \"--\" + (filterElements + 1);\n        var filterCategory = getPropertyValueWithUndefinedDefault(selectedEntryData, \"category\", \"\");\n        var filterElement = getListEntryByFieldName(filterCategory, selectedEntryData.fieldName, view.listParentElementId);\n        var isAlreadyExistingFilter = filterElement != null;\n        if (isAlreadyExistingFilter) {\n            var updatedText = createListEntryInnerHtmlText(selectedEntryData, view, filterElement.id, config.resolveTemplate);\n            filterElement = updateListEntryElement(filterElement, updatedText);\n            return filterElement;\n        }\n        var filterElementText = createListEntryInnerHtmlText(selectedEntryData, view, filterElementId, config.resolveTemplate);\n        filterElement = createListEntryElement(selectedEntryData, view, filterElementId, filterElementText);\n        addClass(resolveStyleClasses(selectedEntryData, view, config.resolveTemplate), filterElement);\n        forEachIdElementIncludingChildren(filterElement, config.onCreatedElement);\n        onFilterMenuEntrySelected(filterElement, handleEventWithEntriesAndConfig(entries, config, selectSearchResultToDisplayFilterOptions));\n        addMainMenuNavigationHandlers(filterElement, config);\n        return filterElement;\n    }\n    function addFilterOptionModificationHandler(filterElement, entries, config) {\n        onSpaceKey(filterElement, toggleFilterEntry);\n        onFilterMenuEntryRemoved(filterElement, handleEventWithConfig(config, removeFilterElement));\n    }\n    function addDefaultFilterOptionModificationHandler(filterElement, entries, config) {\n        onSpaceKey(filterElement, handleEventWithEntriesAndConfig(entries, config, selectSearchResultToDisplayFilterOptions));\n    //TODO could reset elements to their default value upon deletion.\n    }\n    /**\n   * Searches all child elements of the given parent element\n   * for an entry with the given fieldName contained in the hidden fields structure.\n   *\n   * @param {String} category of the element to search for\n   * @param {String} fieldName of the element to search for\n   * @param {String} listParentElementId id of the parent element that child nodes will be searched\n   * @returns {HTMLElement} returns the element that matches the given fieldName or null, if it hadn't been found.\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function getListEntryByFieldName(category, fieldName, listParentElementId) {\n        var globalCategoryResult = null;\n        var result = forEachListEntryElement(listParentElementId, function(element) {\n            var listElementHiddenFields = extractListElementIdProperties(element.id).hiddenFields();\n            if (listElementHiddenFields.fieldName === fieldName) {\n                var elementCategory = getPropertyValueWithUndefinedDefault(listElementHiddenFields, \"category\", \"\");\n                if (elementCategory === \"\") globalCategoryResult = element;\n                else if (elementCategory === category) return element;\n            }\n        });\n        return result != null ? result : globalCategoryResult;\n    }\n    /**\n   * Returns the property value of the object or - if undefined - the default value.\n   * @param {Object} object \n   * @param {String} propertyName \n   * @param {Object} defaultValue \n   * @returns the property value of the object or - if not set - the default value.\n   */ function getPropertyValueWithUndefinedDefault(object, propertyName, defaultValue) {\n        if (typeof object[propertyName] === \"undefined\") return defaultValue;\n        return object[propertyName];\n    }\n    /**\n   * Gets the currently selected url template for navigation.\n   *\n   * @param {String} listParentElementId id of the parent element that child nodes will be searched\n   * @param {String} category the url template needs to belong to the same category\n   * @returns {String} returns the url template or null, if nothing could be found\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function getSelectedUrlTemplate(listParentElementId, category) {\n        return forEachListEntryElement(listParentElementId, function(element) {\n            var listElementHiddenFields = extractListElementIdProperties(element.id).hiddenFields();\n            var urlTemplate = getPropertyValueWithUndefinedDefault(listElementHiddenFields, \"urltemplate\", [\n                \"\"\n            ])[0];\n            if (urlTemplate === \"\") return null; // entry has no url template\n            var elementCategory = getPropertyValueWithUndefinedDefault(listElementHiddenFields, category, \"\");\n            if (elementCategory != category && elementCategory !== \"\") return null; // entry belongs to another category\n            if (hasClass(\"inactive\", element)) return null; // entry is inactive\n            return urlTemplate.value;\n        });\n    }\n    function getSelectedOptions(listParentElementId) {\n        var result = {};\n        forEachListEntryElement(listParentElementId, function(element) {\n            var hiddenFields = extractListElementIdProperties(element.id).hiddenFields();\n            if (typeof hiddenFields.fieldName === \"undefined\" || typeof hiddenFields.value === \"undefined\") return null;\n            if (hasClass(\"inactive\", element)) return null; // entry is inactive\n            result[hiddenFields.fieldName] = hiddenFields.value;\n        });\n        return result;\n    }\n    /**\n   * This function is called for every html element of a given parent.\n   *\n   * @callback module:searchmenu.ListElementFunction\n   * @param {Element} listElement name of the sub menu entries\n   * @return {Object} optional result to exit the loop or null otherwise.\n   */ /**\n   * Iterates through all child nodes of the given parent and calls the given function.\n   * If the function returns a value, it will be returned directly.\n   * If the function returns nothing, the iteration continues.\n   * @param {String} listParentElementId \n   * @param {module:searchmenu.ListElementFunction} listEntryElementFunction \n   * @returns {Object} result of the first entry element function, that had returned one, or null.\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function forEachListEntryElement(listParentElementId, listEntryElementFunction) {\n        var listParentElement = document.getElementById(listParentElementId);\n        var i, listElement, result;\n        for(i = 0; i < listParentElement.childNodes.length; i += 1){\n            listElement = listParentElement.childNodes[i];\n            result = listEntryElementFunction(listElement);\n            if (result) return result;\n        }\n        return null;\n    }\n    /**\n   * Extracts the entry data that it referred by the element given by its ID out of the list of data entries.\n   * @param {string} element id\n   * @param {DescribedEntry[]} array of described entries\n   * @param {boolean} equalMatcher takes the existing and the new entry as parameters and returns true if they are considered \"equal\".\n   * @returns {DescribedEntry} described entry out of the given entries, that suits the element given by its id.\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function findSelectedEntry(id, entries, equalsMatcher) {\n        var selectedEntryIdProperties = extractListElementIdProperties(id);\n        var selectedEntryHiddenFields = selectedEntryIdProperties.hiddenFields();\n        var entryIndex;\n        var currentlySelected;\n        for(entryIndex = 0; entryIndex < entries.length; entryIndex += 1){\n            currentlySelected = entries[entryIndex];\n            if (equalsMatcher(currentlySelected, selectedEntryHiddenFields)) return currentlySelected;\n        }\n        console.log(\"error: no selected entry found for id \" + id + \" in \" + entries);\n        return null;\n    }\n    function selectSearchResultToDisplayDetails(event, entries, config) {\n        hideSubMenus(config);\n        selectSearchResultToDisplaySubMenu(event, entries, config.detailView, config);\n        preventDefaultEventHandling(event);\n    }\n    function selectSearchResultToDisplayFilterOptions(event, entries, config) {\n        hideSubMenus(config);\n        selectSearchResultToDisplaySubMenu(event, entries, config.filterOptionsView, config);\n    }\n    function selectSearchResultToDisplaySubMenu(event, entries, subMenuView, config) {\n        clearAllEntriesOfElementWithId(subMenuView.listParentElementId);\n        var selectedElement = getEventTarget(event);\n        var subMenuEntry = null;\n        var subMenuElement = null;\n        var subMenuIndex = 0;\n        var subMenuEntryId = selectedElement.id + \"--\" + subMenuView.listEntryElementIdPrefix;\n        var subMenuFirstEntry = null;\n        var subMenuElementText;\n        for(subMenuIndex = 0; subMenuIndex < entries.length; subMenuIndex += 1){\n            subMenuEntry = entries[subMenuIndex];\n            subMenuEntryId = selectedElement.id + \"--\" + subMenuView.listEntryElementIdPrefix + \"--\" + (subMenuIndex + 1);\n            subMenuElementText = createListEntryInnerHtmlText(subMenuEntry, subMenuView, subMenuEntryId, config.resolveTemplate);\n            subMenuElement = createListEntryElement(subMenuEntry, subMenuView, subMenuEntryId, subMenuElementText);\n            addClass(resolveStyleClasses(subMenuEntry, subMenuView, config.resolveTemplate), subMenuElement);\n            forEachIdElementIncludingChildren(subMenuElement, config.onCreatedElement);\n            if (subMenuView.isSelectableFilterOption) {\n                addSubMenuNavigationHandlers(subMenuElement);\n                onSubMenuEntrySelected(subMenuElement, handleEventWithEntriesAndConfig(entries, config, selectFilterOption));\n            }\n            if (subMenuIndex === 0) subMenuFirstEntry = subMenuElement;\n        }\n        var divParentOfSelectedElement = parentThatMatches(selectedElement, function(element) {\n            return element.tagName == \"DIV\";\n        });\n        var subMenuViewElement = document.getElementById(subMenuView.viewElementId);\n        var alignedSubMenuXPosition = divParentOfSelectedElement.offsetWidth + 15;\n        var alignedSubMenuYPosition = getYPositionOfElement(selectedElement) + getScrollY();\n        subMenuViewElement.style.left = alignedSubMenuXPosition + \"px\";\n        subMenuViewElement.style.top = alignedSubMenuYPosition + \"px\";\n        showElement(subMenuViewElement);\n        if (subMenuView.isSelectableFilterOption) {\n            selectedElement.blur();\n            subMenuFirstEntry.focus();\n        }\n    }\n    /**\n   * Exit sub menu from event entry and return to main menu.\n   * @param {InputEvent} event\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function returnToMainMenu(event) {\n        var subMenuEntryToExit = getEventTarget(event);\n        var subMenuEntryToExitProperties = extractListElementIdProperties(subMenuEntryToExit.id);\n        var mainMenuEntryToSelect = document.getElementById(subMenuEntryToExitProperties.mainMenuId);\n        subMenuEntryToExit.blur();\n        mainMenuEntryToSelect.focus();\n        hideViewOf(subMenuEntryToExit);\n    }\n    function closeAssociatedSubMenus(event, config) {\n        hideSubMenus(config);\n    }\n    /**\n   * Prevents the given event inside an event handler to get handled anywhere else.\n   * Pressing the arrow key up can lead to scrolling up the view. This is not useful,\n   * if the arrow key navigates the focus inside a sub menu, that is fully contained inside the current view.\n   * @param {InputEvent} inputevent\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function preventDefaultEventHandling(inputevent) {\n        if (typeof inputevent.preventDefault !== \"undefined\") inputevent.preventDefault();\n        else inputevent.returnValue = false;\n    }\n    //TODO could be extracted as ponyfill\n    /**\n   * Browser compatible Y position of the given element.\n   * @returns {number} y position in pixel\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function getYPositionOfElement(element) {\n        var selectedElementPosition = element.getBoundingClientRect();\n        if (typeof selectedElementPosition.y !== \"undefined\") return selectedElementPosition.y;\n        return selectedElementPosition.top;\n    }\n    //TODO could be extracted as ponyfill\n    /**\n   * Browser compatible version of the standard \"window.scrollY\".\n   * @returns {number} y scroll position in pixel\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function getScrollY() {\n        var supportPageOffset = typeof window.pageYOffset !== \"undefined\";\n        if (supportPageOffset) return window.pageYOffset;\n        var isCSS1Compatible = (document.compatMode || \"\") === \"CSS1Compat\";\n        if (isCSS1Compatible) return document.documentElement.scrollTop;\n        return document.body.scrollTop;\n    }\n    function clearAllEntriesOfElementWithId(elementId) {\n        var node = document.getElementById(elementId);\n        // Fastest way to delete child nodes in Chrome and FireFox according to\n        // https://stackoverflow.com/questions/3955229/remove-all-child-elements-of-a-dom-node-in-javascript\n        if (typeof node.cloneNode === \"function\" && typeof node.replaceChild === \"function\") {\n            var cNode = node.cloneNode(false);\n            node.parentNode.replaceChild(cNode, node);\n        } else node.innerHTML = \"\";\n    }\n    /**\n   * Toggles a filter to inactive and vice versa.\n   * @param {InputEvent} event\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function toggleFilterEntry(event) {\n        preventDefaultEventHandling(event);\n        var filterElement = getEventTarget(event);\n        toggleClass(\"inactive\", filterElement);\n    }\n    function removeFilterElement(event, config) {\n        preventDefaultEventHandling(event);\n        focusPreviousSearchResult(event, config);\n        removeChildElement(event);\n    }\n    /**\n   * Removes the event target element from its parent.\n   * @param {InputEvent} event\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function removeChildElement(event) {\n        var element = getEventTarget(event);\n        var parentElement = element.parentElement;\n        var indexOfRemovedElement = extractListElementIdProperties(element.id).mainMenuIndex;\n        parentElement.removeChild(element);\n        forEachChildRecursively(parentElement, 0, 5, function(entry) {\n            if (entry.id) entry.id = extractListElementIdProperties(entry.id).getNewIndexAfterRemovedMainMenuIndex(indexOfRemovedElement);\n        });\n    }\n    function forEachChildRecursively(element, depth, maxDepth, callback) {\n        if (depth > maxDepth || !element.childNodes) return;\n        forEachEntryIn(element.childNodes, function(entry) {\n            callback(entry);\n            forEachChildRecursively(entry, depth + 1, maxDepth, callback);\n        });\n    }\n    /**\n   * This function will be called for every found element\n   * @callback module:searchmenu.ElementFoundListener\n   * @param {Element} foundElement\n   * @param {boolean} isParent true, if it is the created parent. false, if it is a child within the created parent.\n   */ /**\n   * The given callback will be called for the given parent and all its direct child nodes, that contain an id property.\n   * @param {Element} element parent to be inspected\n   * @param {module:searchmenu.ElementFoundListener} callback will be called for every found child and the given parent itself\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function forEachIdElementIncludingChildren(element, callback) {\n        if (element.id) callback(element, true);\n        forEachEntryIn(element.childNodes, function(element) {\n            if (element.id) callback(element, false);\n        });\n    }\n    function forEachEntryIn(array, callback) {\n        var index = 0;\n        for(index = 0; index < array.length; index += 1)callback(array[index], index + 1); //index parameter starts with 1 (1 instead of 0 based)\n    }\n    /**\n   * @param {String} list element type name e.g. \"li\".\n   * @return {number} list element count of the given type\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function getListElementCountOfType(listelementtype) {\n        var firstListEntry = document.getElementById(listelementtype + \"--1\");\n        if (firstListEntry === null) return 0;\n        return firstListEntry.parentElement.childNodes.length;\n    }\n    /**\n   * Updates an already existing list entry element to be used for search results, filter options, details and filters.\n   *\n   * @param {Node} already existing element\n   * @param {String} text updated element text\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function updateListEntryElement(existingElement, text) {\n        existingElement.innerHTML = text;\n        return existingElement;\n    }\n    /**\n   * Creates a new list entry element to be used for search results, filter options, details and filters.\n   *\n   * @param {DescribedEntry} entry entry data\n   * @param {module:searchmenu.SearchViewDescription} view description\n   * @param {number} id id of the list element\n   * @param {String} text text of the list element\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function createListEntryElement(entry, view, id, text) {\n        var listElement = createListElement(text, id, view.listEntryElementTag);\n        var parentElement = document.getElementById(view.listParentElementId);\n        parentElement.appendChild(listElement);\n        return listElement;\n    }\n    /**\n   * Creates the inner HTML Text for a list entry to be used for search results, filter options, details and filters.\n   *\n   * @param {DescribedEntry} entry entry data\n   * @param {module:searchmenu.SearchViewDescription} view description\n   * @param {number} id id of the list element\n   * @param {module:searchmenu.TemplateResolver} resolveTemplate function that resolves variables inside a template with contents of a source object\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function createListEntryInnerHtmlText(entry, view, id, resolveTemplate) {\n        //TODO could support template inside html e.g. referenced by id (with convention over code)\n        //TODO should limit length of resolved variables\n        var text = resolveTemplate(view.listEntryTextTemplate, entry);\n        if (typeof entry.summaries !== \"undefined\") text = resolveTemplate(view.listEntrySummaryTemplate, entry);\n        var json = JSON.stringify(entry); //needs to be without spaces\n        text += '<p id=\"' + id + '--fields\" style=\"display: none\">' + json + \"</p>\";\n        return text;\n    }\n    function resolveStyleClasses(entry, view, resolveTemplate) {\n        var resolvedClasses = resolveTemplate(view.listEntryStyleClassTemplate, entry);\n        resolvedClasses = resolveTemplate(resolvedClasses, {\n            view: view\n        });\n        return resolvedClasses;\n    }\n    /**\n   * Creates a new list element to be used for search results.\n   *\n   * @param {string} text inside the list element\n   * @param {number} id id of the list element\n   * @param {string} elementTag tag (e.g. \"li\") for the element\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function createListElement(text, id, elementTag) {\n        var element = document.createElement(elementTag);\n        element.id = id;\n        element.tabIndex = \"0\";\n        element.innerHTML = text;\n        return element;\n    }\n    function hideMenu(config) {\n        hide(config.resultsView.viewElementId);\n        hide(config.detailView.viewElementId);\n        hide(config.filterOptionsView.viewElementId);\n    }\n    function hideSubMenus(config) {\n        hide(config.detailView.viewElementId);\n        hide(config.filterOptionsView.viewElementId);\n    }\n    /**\n   * Shows the element given by its id.\n   * @param {Element}  elementId ID of the element that should be shown\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function show(elementId) {\n        showElement(document.getElementById(elementId));\n    }\n    /**\n   * Shows the given element.\n   * @param {Element} element element that should be shown\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function showElement(element) {\n        addClass(\"show\", element);\n    }\n    /**\n   * Hides the element given by its id.\n   * @param elementId ID of the element that should be hidden\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function hide(elementId) {\n        hideElement(document.getElementById(elementId));\n    }\n    /**\n   * Hides the view (by removing the class \"show\"), that contains the given element.\n   * The view is identified by the existing style class \"show\".\n   * @param {Element} element\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function hideViewOf(element) {\n        var parentWithShowClass = parentThatMatches(element, function(parent) {\n            return hasClass(\"show\", parent);\n        });\n        if (parentWithShowClass != null) {\n            hideElement(parentWithShowClass);\n            return;\n        }\n    }\n    /**\n   * @callback module:searchmenu.ElementPredicate\n   * @param {Element} element\n   * @returns {boolean} true, when the predicate matches the given element, false otherwise.\n   */ /**\n   * Returns the parent of the element (or the element itself), that matches the given predicate.\n   * Returns null, if no element had been found.\n   *\n   * @param {Element} element\n   * @param {module:searchmenu.ElementPredicate} predicate\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function parentThatMatches(element, predicate) {\n        var parentNode = element;\n        while(parentNode != null){\n            if (predicate(parentNode)) return parentNode;\n            parentNode = parentNode.parentNode;\n        }\n        return null;\n    }\n    /**\n   * Hides the given element.\n   * @param element element that should be hidden\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function hideElement(element) {\n        removeClass(\"show\", element);\n    }\n    function toggleClass(classToToggle, element) {\n        if (hasClass(classToToggle, element)) removeClass(classToToggle, element);\n        else addClass(classToToggle, element);\n    }\n    function addClass(classToAdd, element) {\n        removeClass(classToAdd, element);\n        var separator = element.className.length > 0 ? \" \" : \"\";\n        element.className += separator + classToAdd;\n    }\n    function removeClass(classToRemove, element) {\n        var regex = new RegExp(\"\\\\s?\\\\b\" + classToRemove + \"\\\\b\", \"gi\");\n        element.className = element.className.replace(regex, \"\");\n    }\n    function hasClass(classToLookFor, element) {\n        return element.className != null && element.className.indexOf(classToLookFor) >= 0;\n    }\n    function onMouseOverDelayed(element, delayTime, eventHandler) {\n        addEvent(\"mouseover\", element, function(event) {\n            this.originalEvent = cloneObject(event);\n            this.delayedHandlerTimer = window.setTimeout(function() {\n                eventHandler(typeof this.originalEvent !== \"undefined\" ? this.originalEvent : event);\n            }, delayTime);\n            this.preventEventHandling = function() {\n                if (this.delayedHandlerTimer !== null) clearTimeout(this.delayedHandlerTimer);\n            };\n            addEvent(\"mouseout\", element, this.preventEventHandling);\n            addEvent(\"mousedown\", element, this.preventEventHandling);\n            addEvent(\"keydown\", element, this.preventEventHandling);\n        });\n    }\n    function cloneObject(source) {\n        var result = {};\n        var propertyNames = Object.keys(source);\n        for(var propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex++){\n            var propertyName = propertyNames[propertyIndex];\n            var propertyValue = source[propertyName];\n            result[propertyName] = propertyValue;\n        }\n        return result;\n    }\n    function onEscapeKey(element, eventHandler) {\n        addEvent(\"keydown\", element, function(event) {\n            if (event.key == \"Escape\" || event.key == \"Esc\" || keyCodeOf(event) == 27) eventHandler(event);\n        });\n    }\n    function onEnterKey(element, eventHandler) {\n        addEvent(\"keydown\", element, function(event) {\n            if (event.key == \"Enter\" || keyCodeOf(event) == 13) eventHandler(event);\n        });\n    }\n    function onSpaceKey(element, eventHandler) {\n        addEvent(\"keydown\", element, function(event) {\n            if (event.key == \" \" || event.key == \"Spacebar\" || keyCodeOf(event) == 32) eventHandler(event);\n        });\n    }\n    function onDeleteKey(element, eventHandler) {\n        addEvent(\"keydown\", element, function(event) {\n            if (event.key == \"Del\" || event.key == \"Delete\" || keyCodeOf(event) == 46) eventHandler(event);\n        });\n    }\n    function onBackspaceKey(element, eventHandler) {\n        addEvent(\"keydown\", element, function(event) {\n            if (event.key == \"Backspace\" || keyCodeOf(event) == 8) eventHandler(event);\n        });\n    }\n    function onArrowUpKey(element, eventHandler) {\n        addEvent(\"keydown\", element, function(event) {\n            if (event.key == \"ArrowUp\" || event.key == \"Up\" || keyCodeOf(event) == 38) eventHandler(event);\n        });\n    }\n    function onArrowDownKey(element, eventHandler) {\n        addEvent(\"keydown\", element, function(event) {\n            if (event.key == \"ArrowDown\" || event.key == \"Down\" || keyCodeOf(event) == 40) eventHandler(event);\n        });\n    }\n    function onArrowRightKey(element, eventHandler) {\n        addEvent(\"keydown\", element, function(event) {\n            if (event.key == \"ArrowRight\" || event.key == \"Right\" || keyCodeOf(event) == 39) eventHandler(event);\n        });\n    }\n    function onArrowLeftKey(element, eventHandler) {\n        addEvent(\"keydown\", element, function(event) {\n            if (event.key == \"ArrowLeft\" || event.key == \"Left\" || keyCodeOf(event) == 37) eventHandler(event);\n        });\n    }\n    function addEvent(eventName, element, eventHandler) {\n        $85319350d303889b$var$eventlistener.addEventListener(eventName, element, eventHandler);\n    }\n    /**\n   * @returns {Element} target of the event\n   */ function getEventTarget(event) {\n        return $85319350d303889b$var$eventtarget.getEventTarget(event);\n    }\n    /**\n   * Returns the key code of the event or -1 if it is no available.\n   * @param {KeyboardEvent} event\n   * @return key code or -1 if not available\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */ function keyCodeOf(event) {\n        return typeof event.keyCode === \"undefined\" ? -1 : event.keyCode;\n    }\n    return instance;\n}();\n\n\n//# sourceMappingURL=search-menu-ui.js.map\n","\"use strict\";\n\nvar module = module || {}; // Fallback for vanilla js without modules\n/**\n * @@namespace eventtarget\n */\nvar eventtarget = (module.exports = {}); // Fallback for vanilla js without modules\n\n/**\n * @returns {Element} target of the event\n * @memberof eventtarget\n */\neventtarget.getEventTarget = function (event) {\n  if (typeof event.currentTarget !== \"undefined\" && event.currentTarget != null) {\n    return event.currentTarget;\n  }\n  if (typeof event.srcElement !== \"undefined\" && event.srcElement != null) {\n    return event.srcElement;\n  } else {\n    throw new Error(\"Event doesn't contain bounded element: \" + event);\n  }\n};","\"use strict\";\n\nvar module = module || {}; // Fallback for vanilla js without modules\n/**\n * @namespace selectionrange\n */\nvar selectionrange = (module.exports = {}); // Fallback for vanilla js without modules\n\nselectionrange.moveCursorToEndOf = function (element) {\n  if (typeof element.setSelectionRange === \"function\") {\n    element.setSelectionRange(element.value.length, element.value.length);\n  } else if (typeof element.selectionStart === \"number\" && typeof element.selectionEnd === \"number\") {\n    element.selectionStart = element.selectionEnd = element.value.length;\n  } else if (typeof element.createTextRange === \"function\") {\n    var range = element.createTextRange();\n    range.collapse(true);\n    range.moveEnd(\"character\", element.value.length);\n    range.moveStart(\"character\", element.value.length);\n    range.select();\n  }\n};","\"use strict\";\n\nvar module = module || {}; // Fallback for vanilla js without modules\n/**\n * @@namespace eventlistener\n */\nvar eventlistener = (module.exports = {}); // Fallback for vanilla js without modules\n\n/**\n * Adds an event listener/hander using \"addEventListener\" or whatever method the browser supports.\n * @param {String} eventName\n * @param {Element} element\n * @param {*} eventHandler\n * @memberof addeventlistener\n */\n eventlistener.addEventListener = function (eventName, element, eventHandler) {\n  if (element.addEventListener) {\n    element.addEventListener(eventName, eventHandler, false);\n  } else if (element.attachEvent) {\n    element.attachEvent(\"on\" + eventName, eventHandler);\n  } else {\n    element[\"on\" + eventName] = eventHandler;\n  }\n};\n","/**\n * @file Search UI written in vanilla JavaScript. Menu structure for results. Filters are integrated as search results.\n * @version {@link https://github.com/JohT/search-menu-ui/releases/latest latest version}\n * @author JohT\n */\n\nvar module = datarestructorInternalCreateIfNotExists(module); // Fallback for vanilla js without modules\n\nfunction datarestructorInternalCreateIfNotExists(objectToCheck) {\n  return objectToCheck || {};\n}\n\n/**\n * Contains the main ui component of the search menu ui.\n * @module searchmenu\n */\n var searchmenu = module.exports={}; // Export module for npm...\n searchmenu.internalCreateIfNotExists = datarestructorInternalCreateIfNotExists;\n\nvar eventtarget = eventtarget || require(\"./ponyfills/eventCurrentTargetPonyfill\"); // supports vanilla js & npm\nvar selectionrange = selectionrange || require(\"./ponyfills/selectionRangePonyfill\"); // supports vanilla js & npm\nvar eventlistener = eventlistener || require(\"./ponyfills/addEventListenerPonyfill\"); // supports vanilla js & npm\n\n/**\n * @typedef {Object} module:searchmenu.SearchViewDescription Describes a part of the search view (e.g. search result details).\n * @property {string} viewElementId id of the element (e.g. \"div\"), that contains the view with all list elements and their parent.\n * @property {string} listParentElementId id of the element (e.g. \"ul\"), that contains all list entries and is located inside the view.\n * @property {string} listEntryElementIdPrefix id prefix (followed by \"--\" and the index number) for every list entry\n * @property {string} [listEntryElementTag=\"li\"] element tag for list entries. defaults to \"li\".\n * @property {string} [listEntryTextTemplate=\"{{displayName}}: {{value}}\"] template for the text of each list entry\n * @property {string} [listEntrySummaryTemplate=\"{{summaries[0].displayName}}: {{summaries[0].value}}\"] template for the text of each list entry, if the data group \"summary\" exists.\n * @property {string} [listEntryStyleClassTemplate=\"{{view.listEntryElementIdPrefix}} {{category}}\"] template for the style class of each list entry.\n * @property {boolean} [isSelectableFilterOption=false] Specifies, if the list entry can be selected as filter option\n */\n\nsearchmenu.SearchViewDescriptionBuilder = (function () {\n  \"use strict\";\n\n  /**\n   * Builds a {@link module:searchmenu.SearchViewDescription}, which describes a part of the search menu called \"view\".  \n   * Examples for views are: results, details, filters, filter options. There might be more in future.\n   * \n   * The description contains the id's of the html elements, that will be used as \"binding\", to\n   * add elements like results. The \"viewElementId\" is the main parent (may be a \"div\" tag) of all view elements,\n   * that contains the \"listParentElementId\", which is the parent of the list entries (may be a \"ul\" tag).\n   * \n   * The text content of each entry is described by the text templates. \n   * \n   * Furthermore, the css style class can be given as a template, \n   * so search result field values can be used as a part of the style class.\n   * \n   * @param {module:searchmenu.SearchViewDescription} template optional parameter that contains a template to clone\n   * @constructs SearchViewDescriptionBuilder\n   * @alias module:searchmenu.SearchViewDescriptionBuilder\n   */\n  function SearchViewDescription(template) {\n    var defaultTemplate = \"{{displayName}}: {{value}}\";\n    var defaultSummaryTemplate = \"{{summaries[0].displayName}}: {{summaries[0].value}}\";\n    var defaultStyleClassTemplate = \"{{view.listEntryElementIdPrefix}} {{category}}\";\n    var defaultTag = \"li\";\n    /**\n     * @type {module:searchmenu.SearchViewDescription}\n     * @protected\n     */\n    this.description = {\n      viewElementId: template ? template.viewElementId : \"\",\n      listParentElementId: template ? template.listParentElementId : \"\",\n      listEntryElementIdPrefix: template ? template.listEntryElementIdPrefix : \"\",\n      listEntryElementTag: template ? template.listEntryElementTag : defaultTag,\n      listEntryTextTemplate: template ? template.listEntryTextTemplate : defaultTemplate,\n      listEntrySummaryTemplate: template ? template.listEntrySummaryTemplate : defaultSummaryTemplate,\n      listEntryStyleClassTemplate: template ? template.listEntryStyleClassTemplate : defaultStyleClassTemplate,\n      isSelectableFilterOption: template ? template.isSelectableFilterOption : false\n    };\n    /**\n     * ID of the element (e.g. \"div\"), that contains the view with all list elements and their parent.\n     *\n     * @param {string} value view element ID.\n     * @returns {module:searchmenu.SearchViewDescriptionBuilder}\n     */\n    this.viewElementId = function (value) {\n      this.description.viewElementId = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * ID of the element (e.g. \"ul\"), that contains all list entries and is located inside the view.\n     * @param {string} value parent element ID\n     * @returns {module:searchmenu.SearchViewDescriptionBuilder}\n     */\n    this.listParentElementId = function (value) {\n      this.description.listParentElementId = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * ID prefix (followed by \"--\" and the index number) for every list entry.\n     * @param {string} value ID prefix for every list entry element\n     * @returns {module:searchmenu.SearchViewDescriptionBuilder}\n     */\n    this.listEntryElementIdPrefix = function (value) {\n      //TODO could be checked to not contain the index separation chars \"--\"\n      this.description.listEntryElementIdPrefix = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Element tag for list entries.\n     * @param {string} [value=\"li\"] tag for every list entry element\n     * @returns {module:searchmenu.SearchViewDescriptionBuilder}\n     */\n    this.listEntryElementTag = function (value) {\n      this.description.listEntryElementTag = withDefault(value, defaultTag);\n      return this;\n    };\n    /**\n     * Template for the text of each list entry.\n     * May contain variables in double curly brackets.\n     *\n     * @param {string} [value=\"{{displayName}}: {{value}}\"] list entry text template when there is no summary data group\n     * @returns {module:searchmenu.SearchViewDescriptionBuilder}\n     */\n    this.listEntryTextTemplate = function (value) {\n      this.description.listEntryTextTemplate = withDefault(value, defaultTemplate);\n      return this;\n    };\n    /**\n     * Template for the text of each list entry, if the data group \"summary\" exists.\n     * May contain variables in double curly brackets.\n     *\n     * @param {string} [value=\"{{summaries[0].displayName}}: {{summaries[0].value}}\"] list entry text template when there is a summary data group\n     * @returns {module:searchmenu.SearchViewDescriptionBuilder}\n     */\n    this.listEntrySummaryTemplate = function (value) {\n      this.description.listEntrySummaryTemplate = withDefault(value, defaultSummaryTemplate);\n      return this;\n    };\n    /**\n     * Template for the style classes of each list entry.\n     * May contain variables in double curly brackets.\n     * To use the property values of this view, prefix them with \"view\", e.g.: \"{{view.listEntryElementIdPrefix}}\".\n     *\n     * @param {string} [value=\"{{view.listEntryElementIdPrefix}} {{category}}\"] list entry style classes template\n     * @returns {module:searchmenu.SearchViewDescriptionBuilder}\n     */\n     this.listEntryStyleClassTemplate = function (value) {\n      this.description.listEntryStyleClassTemplate = withDefault(value, defaultStyleClassTemplate);\n      return this;\n    };\n    /**\n     * Specifies, if the list entry can be selected as filter option.\n     * @param {boolean} [value=false] if a list entry is selectable as filter option\n     * @returns {module:searchmenu.SearchViewDescriptionBuilder}\n     */\n    this.isSelectableFilterOption = function (value) {\n      this.description.isSelectableFilterOption = value === true;\n      return this;\n    };\n    /**\n     * Finishes the build of the description and returns its final (meant to be immutable) object.\n     * @returns {module:searchmenu.SearchViewDescription}\n     */\n    this.build = function () {\n      return this.description;\n    };\n  }\n\n  function withDefault(value, defaultValue) {\n    return isSpecifiedString(value) ? value : defaultValue;\n  }\n\n  function isSpecifiedString(value) {\n    return typeof value === \"string\" && value != null && value != \"\";\n  }\n\n  return SearchViewDescription;\n})();\n\n//TODO could provide the currently only described SearchUiData as own data structure in its own module.\n/**\n * @typedef {Object} module:searchmenu.SearchUiData \n * @property {String} [category=\"\"] name of the category. Default = \"\". Could contain a short domain name. (e.g. \"city\")\n * @property {String} fieldName field name that will be used e.g. as a search parameter name for filter options.\n * @property {String} [displayName=\"\"] readable display name for e.g. the list of results.\n * @property {String} [abbreviation=\"\"] one optional character, a symbol character or a short abbreviation of the category\n * @property {String} value value of the field\n * @property {module:searchmenu.SearchUiData[]} details if there are further details that will be displayed e.g. on mouse over\n * @property {module:searchmenu.SearchUiData[]} options contains filter options that can be selected as search parameters \n * @property {module:searchmenu.SearchUiData[]} default array with one element representing the default filter option (selected automatically)\n * @property {module:searchmenu.SearchUiData[]} summaries fields that are used to display the main search entry/result\n * @property {module:searchmenu.SearchUiData[]} urltemplate contains a single field with the value of the url template. Marks the entry as navigation target.\n */\n\n/**\n * @callback module:searchmenu.ResolveTemplateFunction replaces variables with object properties.\n * @param {String} template may contain variables in double curly brackets. T\n * Typically supported variables would be: {{category}} {{fieldName}}, {{displayName}}, {{abbreviation}}, {{value}}\n * @return {String} string with resolved/replaced variables\n */\n\n/**\n * @callback module:searchmenu.FieldsJson returns the fields as JSON\n * @return {String} JSON of all contained fields\n */\n\n/**\n * This function will be called, when search results are available.\n * @callback SearchServiceResultAvailable\n * @param {Object} searchResultData already parsed data object containing the result of the search\n */\n\n/**\n * This function will be called to trigger search (calling the search backend).\n * @callback module:searchmenu.SearchService\n * @param {Object} searchParameters object that contains all parameters as properties. It will be converted to JSON.\n * @param {module:searchmenu.SearchServiceResultAvailable} onSearchResultsAvailable will be called when search results are available.\n */\n\n/**\n * This function converts the data from search backend to the structure needed by the search UI.\n * @callback module:searchmenu.DataConverter\n * @param {Object} searchData\n * @returns {module:searchmenu.SearchUiData} converted and structured data for search UI\n */\n\n/**\n * This function replaces variables in double curly brackets with the property values of the given object.\n * @callback module:searchmenu.TemplateResolver\n * @param {String} templateToResolve may contain variables in double curly brackets e.g. like `\"{{searchtext}}\"`.\n * @param {Object} sourceObject the fields of this object are used to replace the variables in the template\n * @returns {module:searchmenu.SearchUiData} converted and structured data for search UI\n */\n\n/**\n * This function adds predefined search parameters before search is triggered, e.g. constants, environment parameters, ...\n * @callback module:searchmenu.SearchParameterAdder\n * @param {Object} searchParametersObject\n */\n\n/**\n * This function will be called when a new HTML is created.\n * @callback module:searchmenu.ElementCreatedListener\n * @param {Element} newlyCreatedElement\n * @param {boolean} isParent true, if it is the created parent. false, if it is a child within the created parent. \n */\n\n/**\n * This function will be called to navigate to a selected search result url.\n * @callback module:searchmenu.NavigateToFunction\n * @param {String} destinationUrl\n */\n\n/**\n * @typedef {Object} module:searchmenu.SearchMenuConfig\n * @property {module:searchmenu.SearchService} triggerSearch triggers search (backend)\n * @property {module:searchmenu.DataConverter} convertData converts search result data to search ui data. Lets data through unchanged by default.\n * @property {module:searchmenu.searchParameterAdder} addPredefinedParametersTo adds custom search parameters \n * @property {module:searchmenu.ElementCreatedListener} onCreatedElement this function will be called when a new HTML is created.\n * @property {module:searchmenu.NavigateToFunction} navigateTo this function will be called to navigate to a selected search result url.\n * @property {string} searchAreaElementId id of the whole search area (default=\"searcharea\")\n * @property {string} inputElementId id of the search input field (default=\"searchinputtext\")\n * @property {module:searchmenu.SearchViewDescription} resultsView describes the main view containing the search results\n * @property {module:searchmenu.SearchViewDescription} detailView describes the details view\n * @property {module:searchmenu.SearchViewDescription} filterOptionsView describes the filter options view\n * @property {module:searchmenu.SearchViewDescription} filtersView describes the filters view\n * @property {string} [waitBeforeClose=700] timeout in milliseconds when search is closed after blur (loss of focus) (default=700)\n * @property {string} [waitBeforeSearch=500] time in milliseconds to wait until typing is finished and search starts (default=500)\n * @property {string} [waitBeforeMouseOver=700] time in milliseconds to wait until mouse over opens details (default=700)\n */\n\nsearchmenu.SearchMenuAPI = (function () {\n  \"use strict\";\n  /**\n   * Search Menu UI API\n   * @constructs SearchMenuAPI\n   * @alias module:searchmenu.SearchMenuAPI\n   */\n  function SearchMenuApiBuilder() {\n    this.config = {\n      triggerSearch: function (/* searchParameters, onSearchResultsAvailable */) {\n        throw new Error(\"search service needs to be defined.\");\n      },\n      convertData: function (sourceData) {\n        return sourceData;\n      },\n      resolveTemplate: function (/* sourceData */) {\n        throw new Error(\"template resolver needs to be defined.\");\n      },\n      addPredefinedParametersTo: function (/* object */) {\n        //does nothing if not specified otherwise\n      },\n      onCreatedElement: function (/* element, isParent */) {\n        //does nothing if not specified otherwise\n      },\n      navigateTo: function (destinationUrl) {\n        window.location.href = destinationUrl;\n      },\n      createdElementListeners: [],\n      searchAreaElementId: \"searcharea\",\n      inputElementId: \"searchinputtext\",\n      searchTextParameterName: \"searchtext\",\n      resultsView: defaultResultsView(),\n      detailView: defaultDetailView(),\n      filterOptionsView: defaultFilterOptionsView(),\n      filtersView: defaultFiltersView(),\n      waitBeforeClose: 700,\n      waitBeforeSearch: 500,\n      waitBeforeMouseOver: 700\n    };\n    /**\n     * Defines the search service function, that will be called whenever search is triggered.\n     * @param {module:searchmenu.SearchService} service function that will be called to trigger search (backend).\n     * @returns module:searchmenu.SearchMenuAPI\n     */\n    this.searchService = function (service) {\n      this.config.triggerSearch = service;\n      return this;\n    };\n    /**\n     * Defines the converter, that converts search result data to search ui data.\n     * Without setting a data converter, data is taken directly from the backend service,\n     * that needs to provide the results in the search menu data structure.\n     * @param {module:searchmenu.DataConverter} converter function that will be called to create the search menu data structure\n     * @returns module:searchmenu.SearchMenuAPI\n     */\n    this.dataConverter = function (converter) {\n      this.config.convertData = converter;\n      return this;\n    };\n    /**\n     * Defines the template resolver, that replaces variables in double curly brackets with the property values of the given object.\n     * @param {module:searchmenu.TemplateResolver} resolver function that will be called to resolve strings with variables.\n     * @returns module:searchmenu.SearchMenuAPI\n     */\n     this.templateResolver = function (resolver) {\n      this.config.resolveTemplate = resolver;\n      return this;\n    };\n    /**\n     * Defines the function, that adds predefined (fixed, constant, environmental) search parameters\n     * to the first parameter object.\n     * @param {module:searchmenu.SearchParameterAdder} adder function that will be called to before search is triggered.\n     * @returns module:searchmenu.SearchMenuAPI\n     */\n    this.addPredefinedParametersTo = function (adder) {\n      this.config.addPredefinedParametersTo = adder;\n      return this;\n    };\n    /**\n     * Sets the listener, that will be called, when a new HTML element was created.\n     * @param {module:searchmenu.ElementCreatedListener} listener\n     * @returns module:searchmenu.SearchMenuAPI\n     */\n    this.setElementCreatedHandler = function (listener) {\n      this.config.onCreatedElement = listener;\n      return this;\n    };\n    /**\n     * Adds another listener, that will be called, when a new HTML element was created.\n     * @param {module:searchmenu.ElementCreatedListener} listener\n     * @returns module:searchmenu.SearchMenuAPI\n     */\n    this.addElementCreatedHandler = function (listener) {\n      this.config.createdElementListeners.push(listener);\n      return this;\n    };\n\n    /**\n     * Adds the given style class when an element receives focus.\n     * This is done for every element that is created dynamically (e.g. search results and filters).\n     * It is only meant to be used for browsers like old IE5 ones that doesn't support focus pseudo style class.\n     *\n     * @param {String} [focusStyleClassName=\"focus\"]\n     * @returns module:searchmenu.SearchMenuAPI\n     */\n    this.addFocusStyleClassOnEveryCreatedElement = function (focusStyleClassName) {\n      var className = withDefault(focusStyleClassName, \"focus\");\n      this.addElementCreatedHandler(function (element, isParent) {\n        if (!isParent) {\n          return;\n        }\n        addEvent(\"focus\", element, function (event) {\n          addClass(className, getEventTarget(event));\n        });\n        addEvent(\"blur\", element, function (event) {\n          removeClass(className, getEventTarget(event));\n        });\n      });\n      return this;\n    };\n    /**\n     * Sets the element ID of the parent, that represents the whole search menu component.\n     * @param {String} [id=\"searcharea\"] id of the parent element, that represents the whole search menu component.\n     * @returns module:searchmenu.SearchMenuAPI\n     */\n    this.searchAreaElementId = function (id) {\n      this.config.searchAreaElementId = withDefault(id, \"searcharea\");\n      return this;\n    };\n    /**\n     * Sets the input search text element ID,.\n     * @param {String} [id=\"searchinputtext\"] id of the input element, that contains the search text.\n     * @returns module:searchmenu.SearchMenuAPI\n     */\n    this.inputElementId = function (id) {\n      this.config.inputElementId = withDefault(id, \"searchinputtext\");\n      return this;\n    };\n    /**\n     * Sets the name of the backend search service parameter, that contains the input search text.\n     * @param {String} [value=\"searchtext\"] name of the parameter, that contains the input search text and that can be used as a variable inside the url or body template for the backend service\n     * @returns module:searchmenu.SearchMenuAPI\n     */\n    this.searchTextParameterName = function (value) {\n      this.config.searchTextParameterName = withDefault(value, \"searchtext\");\n      return this;\n    };\n    /**\n     * Sets the view, that is used to display all search results.  \n     * The default view settings can be found [here]{@link module:searchmenu.SearchMenuAPI.defaultResultsView}.\n     *\n     * @param {module:searchmenu.SearchViewDescription} view connects the part of the search menu, that displays all search results\n     * @returns module:searchmenu.SearchMenuAPI\n     * @see {@link module:searchmenu.SearchMenuAPI.defaultResultsView}\n     */\n    this.resultsView = function (view) {\n      this.config.resultsView = view;\n      return this;\n    };\n    /**\n     * Sets the view, that is used to display details of a selected search result.  \n     * The default view settings can be found [here]{@link module:searchmenu.SearchMenuAPI.defaultDetailView}.\n     *\n     * @param {module:searchmenu.SearchViewDescription} view connects the part of the search menu, that displays details of a selected search result\n     * @returns module:searchmenu.SearchMenuAPI\n     * @see {@link module:searchmenu.SearchMenuAPI.defaultDetailView}\n     */\n    this.detailView = function (view) {\n      this.config.detailView = view;\n      return this;\n    };\n    /**\n     * Sets the view, that is used to display currently selected filter options.   \n     * The default view settings can be found [here]{@link module:searchmenu.SearchMenuAPI.defaultFilterOptionsView}.\n     *\n     * @param {module:searchmenu.SearchViewDescription} view connects the part of the search menu, that displays currently selected filter options\n     * @returns module:searchmenu.SearchMenuAPI\n     * @see {@link module:searchmenu.SearchMenuAPI.defaultFilterOptionsView}\n     */\n    this.filterOptionsView = function (view) {\n      this.config.filterOptionsView = view;\n      return this;\n    };\n    /**\n     * Sets the view, that is used to display search results, that represent filter options.   \n     * The default view settings can be found [here]{@link module:searchmenu.SearchMenuAPI.defaultFiltersView}.\n     *\n     * @param {module:searchmenu.SearchViewDescription} view connects the part of the search menu, that displays search results, that represent filter options\n     * @returns module:searchmenu.SearchMenuAPI\n     * @see {@link module:searchmenu.SearchMenuAPI.defaultFiltersView}\n     */\n    this.filtersView = function (view) {\n      this.config.filtersView = view;\n      return this;\n    };\n    /**\n     * Sets the time the search menu will remain open, when it has lost focus.\n     * Prevents the menu to disappear while using it.\n     * @param {number} [ms=700] time in milliseconds the search menu will remain open until it is closed after loosing focus.\n     * @returns module:searchmenu.SearchMenuAPI\n     */\n    this.waitBeforeClose = function (ms) {\n      this.config.waitBeforeClose = ms;\n      return this;\n    };\n    /**\n     * Sets the time to wait before the search service is called.\n     * Prevents calls to the search backend while changing the search input.\n     * @param {number} [ms=500] time in milliseconds to wait before the search service is called\n     * @returns module:searchmenu.SearchMenuAPI\n     */\n    this.waitBeforeSearch = function (ms) {\n      this.config.waitBeforeSearch = ms;\n      return this;\n    };\n    /**\n     * Sets the time to  wait before search result details are opened on mouse over.\n     * Doesn't affect keyboard selection, which will immediately open the search details.\n     * Prevents details to open on search results, that are only touched by the mouse pointer for a short period of time.\n     * @param {number} [ms=700] time in milliseconds to wait before search result details are opened on mouse over.\n     * @returns module:searchmenu.SearchMenuAPI\n     */\n    this.waitBeforeMouseOver = function (ms) {\n      this.config.waitBeforeMouseOver = ms;\n      return this;\n    };\n    /**\n     * Finishes the configuration and creates the {@link module:searchmenu.SearchMenuUI}.\n     * @returns module:searchmenu.SearchMenuUI\n     */\n    this.start = function () {\n      var config = this.config;\n      if (config.createdElementListeners.length > 0) {\n        this.setElementCreatedHandler(function (element, isParent) {\n          var index = 0;\n          for (index = 0; index < config.createdElementListeners.length; index += 1) {\n            config.createdElementListeners[index](element, isParent);\n          }\n        });\n      }\n      return new searchmenu.SearchMenuUI(config);\n    };\n  }\n\n  /**\n   * Contains the default settings for the results view.\n   * - viewElementId = \"`searchresults`\"\n   * - listParentElementId = \"`searchmatches`\"\n   * - listEntryElementIdPrefix = \"`result`\"\n   * - listEntryTextTemplate = \"`{{abbreviation}} {{displayName}}`\"\n   * - listEntrySummaryTemplate = \"`{{summaries[0].abbreviation}} <b>{{summaries[1].value}}</b><br>{{summaries[2].value}}: {{summaries[0].value}}`\"\n   *\n   * @returns {module:searchmenu.SearchViewDescription} default settings for the results view\n   * @protected\n   * @memberof module:searchmenu.SearchMenuAPI\n   */\n  function defaultResultsView() {\n    return new searchmenu.SearchViewDescriptionBuilder()\n      .viewElementId(\"searchresults\")\n      .listParentElementId(\"searchmatches\")\n      .listEntryElementIdPrefix(\"result\")\n      .listEntryTextTemplate(\"{{abbreviation}} {{displayName}}\") \n      .listEntrySummaryTemplate(\n        \"{{summaries[0].abbreviation}} <b>{{summaries[1].value}}</b><br>{{summaries[2].value}}: {{summaries[0].value}}\"\n      )\n      .build();\n  }\n\n  /**\n   * Contains the default settings for the details view.\n   * - viewElementId = \"`searchdetails`\"\n   * - listParentElementId = \"`searchdetailentries`\"\n   * - listEntryElementIdPrefix = \"`detail`\"\n   * - listEntryTextTemplate = \"`<b>{{displayName}}:</b> {{value}}`\"\n   *\n   * @returns {module:searchmenu.SearchViewDescription} default settings for the details view\n   * @protected\n   * @memberof module:searchmenu.SearchMenuAPI\n   */\n  function defaultDetailView() {\n    return new searchmenu.SearchViewDescriptionBuilder()\n      .viewElementId(\"searchdetails\")\n      .listParentElementId(\"searchdetailentries\")\n      .listEntryElementIdPrefix(\"detail\")\n      .listEntryTextTemplate(\"<b>{{displayName}}:</b> {{value}}\")\n      .build();\n  }\n\n  /**\n   * Contains the default settings for the filter options view.\n   * - viewElementId = \"`searchfilteroptions`\"\n   * - listParentElementId = \"`searchfilteroptionentries`\"\n   * - listEntryElementIdPrefix = \"`filter`\"\n   * - listEntryTextTemplate = \"`{{value}}`\"\n   * - listEntrySummaryTemplate = \"`{{summaries[0].value}}`\"\n   * - isSelectableFilterOption = `true`\n   *\n   * @returns {module:searchmenu.SearchViewDescription} default settings for the filter options view\n   * @protected\n   * @memberof module:searchmenu.SearchMenuAPI\n   */\n  function defaultFilterOptionsView() {\n    return new searchmenu.SearchViewDescriptionBuilder()\n      .viewElementId(\"searchfilteroptions\")\n      .listParentElementId(\"searchfilteroptionentries\")\n      .listEntryElementIdPrefix(\"filter\")\n      .listEntryTextTemplate(\"{{value}}\")\n      .listEntrySummaryTemplate(\"{{summaries[0].value}}\")\n      .isSelectableFilterOption(true)\n      .build();\n  }\n\n  /**\n   * Contains the default settings for the filters view.\n   * - viewElementId = \"`searchresults`\"\n   * - listParentElementId = \"`searchfilters`\"\n   * - listEntryElementIdPrefix = \"`filter`\"\n   * - isSelectableFilterOption = `true`\n   * @returns {module:searchmenu.SearchViewDescription} default settings for the filters view\n   * @protected\n   * @memberof module:searchmenu.SearchMenuAPI\n   */\n  function defaultFiltersView() {\n    return new searchmenu.SearchViewDescriptionBuilder()\n      .viewElementId(\"searchresults\")\n      .listParentElementId(\"searchfilters\")\n      .listEntryElementIdPrefix(\"filter\")\n      .isSelectableFilterOption(true)\n      .build();\n  }\n\n  function addEvent(eventName, element, eventHandler) {\n    eventlistener.addEventListener(eventName, element, eventHandler);\n  }\n\n  function getEventTarget(event) {\n    return eventtarget.getEventTarget(event);\n  }\n\n  function addClass(classToAdd, element) {\n    removeClass(classToAdd, element);\n    var separator = element.className.length > 0 ? \" \" : \"\";\n    element.className += separator + classToAdd;\n  }\n\n  function removeClass(classToRemove, element) {\n    var regex = new RegExp(\"\\\\s?\\\\b\" + classToRemove + \"\\\\b\", \"gi\");\n    element.className = element.className.replace(regex, \"\");\n  }\n\n  function withDefault(value, defaultValue) {\n    return isSpecifiedString(value) ? value : defaultValue;\n  }\n\n  function isSpecifiedString(value) {\n    return typeof value === \"string\" && value != null && value != \"\";\n  }\n\n  return SearchMenuApiBuilder;\n}());\n\nsearchmenu.SearchMenuUI = (function () {\n  \"use strict\";\n\n  /**\n   * Search Menu UI.\n   *\n   * Contains the \"behavior\" of the search bar. It submits the search query,\n   * parses the results, displays matches and filters and responds to\n   * clicks and key presses.\n   * Further resources:\n   * - [API]{@link module:searchmenu.SearchMenuAPI}\n   * - [Configuration]{@link module:searchmenu.SearchMenuConfig}\n   * \n   * @constructs SearchMenuUI\n   * @alias module:searchmenu.SearchMenuUI\n   * @see {@link module:searchmenu.SearchMenuAPI}\n   * @see {@link module:searchmenu.SearchMenuConfig}\n   */\n  var instance = function (config) {\n    /**\n     * Configuration.\n     * @type {module:searchmenu.SearchMenuConfig}\n     * @protected \n     */\n    this.config = config;\n    /**\n     * Search text that correspondents to the currently shown results.\n     * @type {String}\n     * @protected \n     */\n    this.currentSearchText = \"\";\n    /**\n     * Timer that is used to wait before the menu is closed.\n     * @type {Timer}\n     * @protected \n     */\n    this.focusOutTimer = null;\n    /**\n     * Timer that is used to wait before the search service is called.\n     * @type {Timer}\n     * @protected \n     */\n    this.waitBeforeSearchTimer = null;\n\n    var search = document.getElementById(config.inputElementId);\n    onEscapeKey(search, function (event) {\n      getEventTarget(event).value = \"\";\n      hideMenu(config);\n    });\n    onArrowDownKey(search, handleEventWithConfig(config, focusFirstResult));\n    addEvent(\"keyup\", search, function (event) {\n      if (this.waitBeforeSearchTimer !== null) {\n        clearTimeout(this.waitBeforeSearchTimer);\n      }\n      var newSearchText = getEventTarget(event).value;\n      this.waitBeforeSearchTimer = window.setTimeout(function () {\n        if (newSearchText !== this.currentSearchText || this.currentSearchText === \"\") {\n          updateSearch(newSearchText, config);\n          this.currentSearchText = newSearchText;\n        }\n      }, config.waitBeforeSearch);\n    });\n\n    var searchareaElement = document.getElementById(config.searchAreaElementId);\n    addEvent(\"focusin\", searchareaElement, function () {\n      var searchInputElement = document.getElementById(config.inputElementId);\n      if (searchInputElement.value !== \"\") {\n        if (this.focusOutTimer != null) {\n          clearTimeout(this.focusOutTimer);\n        }\n        //TODO should only show results if there are some\n        //TODO could add a \"spinner\" when search is running\n        show(config.resultsView.viewElementId);\n      }\n    });\n    addEvent(\"focusout\", searchareaElement, function () {\n      this.focusOutTimer = window.setTimeout(function () {\n        hideMenu(config);\n      }, config.waitBeforeClose);\n    });\n  };\n\n  function updateSearch(searchText, config) {\n    var matchList = document.getElementById(config.resultsView.listParentElementId);\n    matchList.innerHTML = \"\";\n    if (searchText.length === 0) {\n      hideMenu(config);\n      return;\n    }\n    show(config.resultsView.viewElementId);\n    getSearchResults(searchText, config);\n  }\n\n  function getSearchResults(searchText, config) {\n    //TODO should \"retrigger\" search when new filter options are selected (after each?)\n    var searchParameters = getSelectedOptions(config.filtersView.listParentElementId);\n    searchParameters[config.searchTextParameterName] = searchText;\n    config.addPredefinedParametersTo(searchParameters);\n    //TODO could provide optional build in search text highlighting\n    config.triggerSearch(searchParameters, function (jsonResult) {\n      displayResults(config.convertData(jsonResult), config);\n    });\n    //TODO should provide some info if search fails (service temporary unavailable, ...)\n  }\n\n  function displayResults(jsonResults, config) {\n    var index = 0;\n    for (index = 0; index < jsonResults.length; index += 1) {\n      addResult(jsonResults[index], index + 1, config);\n    }\n  }\n\n  function addResult(entry, i, config) {\n    var listElementId = config.resultsView.listEntryElementIdPrefix + \"--\" + i;\n    var resultElementText = createListEntryInnerHtmlText(entry, config.resultsView, listElementId, config.resolveTemplate);\n    var resultElement = createListEntryElement(entry, config.resultsView, listElementId, resultElementText);\n    addClass(resolveStyleClasses(entry, config.resultsView, config.resolveTemplate), resultElement);\n    forEachIdElementIncludingChildren(resultElement, config.onCreatedElement);\n\n    if (isMenuEntryWithFurtherDetails(entry)) {\n      onMenuEntrySelected(resultElement, handleEventWithEntriesAndConfig(entry.details, config, selectSearchResultToDisplayDetails));\n      onMouseOverDelayed(\n        resultElement,\n        config.waitBeforeMouseOver,\n        handleEventWithEntriesAndConfig(entry.details, config, selectSearchResultToDisplayDetails)\n      );\n      onMenuEntryChosen(resultElement, function () {\n        var selectedUrlTemplate = getSelectedUrlTemplate(config.filtersView.listParentElementId, getPropertyValueWithUndefinedDefault(entry, \"category\", \"\"));\n        if (selectedUrlTemplate) {\n          //TODO should add domain, baseurl, ... as data sources for variables to use inside the template\n          var targetURL = config.resolveTemplate(selectedUrlTemplate, entry);\n          config.navigateTo(targetURL);\n        }\n      });\n    }\n    if (isMenuEntryWithOptions(entry)) {\n      var options = entry.options;\n      //TODO should support details for filter options.\n      //TODO could skip sub menu, if there is only one option (with/without being default).\n      //TODO could be used for constants (pre selected single filter options) like \"tenant-number\", \"current-account\"\n      //TODO could remove the original search result filter when the default option is pre selected (and its options are copied).\n      if (isMenuEntryWithDefault(entry)) {\n        options = insertAtBeginningIfMissing(entry.options, entry[\"default\"][0], equalProperties([\"value\"]));\n        var filterOptionsElement = createFilterOption(entry[\"default\"][0], options, config.filtersView, config);\n        addDefaultFilterOptionModificationHandler(filterOptionsElement, options, config);\n      }\n      onMenuEntrySelected(resultElement, handleEventWithEntriesAndConfig(entry.options, config, selectSearchResultToDisplayFilterOptions));\n      onMenuEntryChosen(resultElement, handleEventWithEntriesAndConfig(entry.options, config, selectSearchResultToDisplayFilterOptions));\n    }\n    addMainMenuNavigationHandlers(resultElement, config);\n  }\n\n  function equalProperties(propertyNames) {\n    return function (existingObject, newObject) {\n      var index;\n      for (index = 0; index < propertyNames.length; index += 1) {\n        if (existingObject[propertyNames[index]] != newObject[propertyNames[index]]) {\n          return false;\n        }\n      }\n      return true;\n    };\n  }\n\n  /**\n   * Adds the given entry at be beginning of the given array of entries if it's missing.\n   * The equalFunction determines, if the new value is missing (returns false) or not (returns true).\n   * If the entry to add is null, the entries are returned directly.\n   *\n   * @param {Object[]} entries\n   * @param {Object} entryToAdd\n   * @param {boolean} equalMatcher takes the existing and the new entry as parameters and returns true if they are considered \"equal\".\n   * @returns {Object[]}\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function insertAtBeginningIfMissing(entries, entryToAdd, equalMatcher) {\n    if (!entryToAdd) {\n      return entries;\n    }\n    var index;\n    var alreadyContainsEntryToAdd = false;\n    for (index = 0; index < entries.length; index += 1) {\n      if (equalMatcher(entries[index], entryToAdd)) {\n        alreadyContainsEntryToAdd = true;\n        break;\n      }\n    }\n    if (alreadyContainsEntryToAdd) {\n      return entries;\n    }\n    var result = [];\n    result.push(entryToAdd);\n    for (index = 0; index < entries.length; index += 1) {\n      result.push(entries[index]);\n    }\n    return result;\n  }\n\n  function isMenuEntryWithFurtherDetails(entry) {\n    return typeof entry.details !== \"undefined\";\n  }\n\n  function isMenuEntryWithOptions(entry) {\n    return typeof entry.options !== \"undefined\";\n  }\n\n  function isMenuEntryWithDefault(entry) {\n    return typeof entry[\"default\"] !== \"undefined\";\n  }\n\n  /**\n   * Reacts to input events (keys, ...) to navigate through main menu entries.\n   *\n   * @param {Element} element to add event handlers\n   * @param {SearchMenuConfig} config search configuration\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function addMainMenuNavigationHandlers(element, config) {\n    onArrowDownKey(element, handleEventWithConfig(config, focusNextSearchResult));\n    onArrowUpKey(element, handleEventWithConfig(config, focusPreviousSearchResult));\n    onEscapeKey(element, handleEventWithConfig(config, focusSearchInput));\n    onArrowLeftKey(element, handleEventWithConfig(config, closeAssociatedSubMenus));\n  }\n\n  /**\n   * Reacts to input events (keys, ...) to navigate through sub menu entries.\n   *\n   * @param {Element} element to add event handlers\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function addSubMenuNavigationHandlers(element) {\n    onArrowDownKey(element, focusNextMenuEntry);\n    onArrowUpKey(element, focusPreviousMenuEntry);\n    onArrowLeftKey(element, returnToMainMenu);\n    onEscapeKey(element, returnToMainMenu);\n  }\n\n  function onMenuEntrySelected(element, eventHandler) {\n    onSpaceKey(element, eventHandler);\n    onArrowRightKey(element, eventHandler);\n  }\n\n  function onMenuEntryChosen(element, eventHandler) {\n    addEvent(\"mousedown\", element, eventHandler);\n    onEnterKey(element, eventHandler);\n  }\n\n  function onSubMenuEntrySelected(element, eventHandler) {\n    addEvent(\"mousedown\", element, eventHandler);\n    onEnterKey(element, eventHandler);\n    onSpaceKey(element, eventHandler);\n  }\n\n  function onFilterMenuEntrySelected(element, eventHandler) {\n    addEvent(\"mousedown\", element, eventHandler);\n    onEnterKey(element, eventHandler);\n    onArrowRightKey(element, eventHandler);\n  }\n\n  function onFilterMenuEntryRemoved(element, eventHandler) {\n    onDeleteKey(element, eventHandler);\n    onBackspaceKey(element, eventHandler);\n    //TODO should also be possible with mouse (without using keys)\n  }\n\n  /**\n   * @param {SearchMenuConfig} config search configuration\n   * @param {EventListener} eventHandler event handler\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function handleEventWithConfig(config, eventHandler) {\n    return function (event) {\n      eventHandler(event, config);\n    };\n  }\n\n  /**\n   * @param {Object[]} entries raw data of the entry\n   * @param {module:searchmenu.SearchMenuConfig} config search configuration\n   * @param {EventListener} eventHandler event handler\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function handleEventWithEntriesAndConfig(entries, config, eventHandler) {\n    return function (event) {\n      eventHandler(event, entries, config);\n    };\n  }\n\n  /**\n   * This callback will be called, if there is not next or previous menu entry to navigate to.\n   * The implementation can decide, what to do using the given id properties.\n   *\n   * @callback module:searchmenu.MenuEntryNotFoundHandler\n   * @param {module:searchmenu.ListElementIdProperties} properties of the element id\n   */\n  /**\n   * This function returns the ID for the first sub menu entry using the given type name (= name of the sub menu).\n   *\n   * @callback module:searchmenu.SubMenuId\n   * @param {string} type name of the sub menu entries\n   */\n  /**\n   * @typedef {Object} module:searchmenu.ListElementIdProperties\n   * @property {id} id Original ID\n   * @property {string} type Type of the list element\n   * @property {number} index Index of the list element\n   * @property {string} previousId ID of the previous list element\n   * @property {string} nextId ID of the next list element\n   * @property {string} firstId ID of the first list element\n   * @property {string} lastId ID of the last list element\n   * @property {module:searchmenu.SubMenuId} subMenuId  Returns the ID of the first sub menu entry (with the given type name as parameter)\n   * @property {string} mainMenuId ID of the main menu entry e.g. to leave the sub menu. Equals to the id, if it already is a main menu entry\n   * @property {boolean} hiddenFieldsId ID of the embedded hidden field, that contains all public information of the described entry as JSON.\n   * @property {boolean} hiddenFields Parses the JSON inside the \"hiddenFieldsId\"-Element and returns the object with the described entry.\n   * @property {boolean} isFirstElement true, if it is the first element in the list\n   * @property {boolean} isSubMenu true, if it is the ID of an sub menu entry\n   */\n  /**\n   * Extracts properties like type and index\n   * from the given list element id string.\n   *\n   * @param {string} id\n   * @return {module:searchmenu.ListElementIdProperties} list element id properties\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function extractListElementIdProperties(id) {\n    var separator = \"--\";\n    var splittedId = id.split(separator);\n    if (splittedId.length < 2) {\n      console.log(\"expected at least one '\" + separator + \"' separator inside the id \" + id);\n    }\n    var extractedMainMenuType = splittedId[0];\n    var extractedMainMenuIndex = parseInt(splittedId[1]);\n    var extractedType = splittedId[splittedId.length - 2];\n    var extractedIndex = parseInt(splittedId[splittedId.length - 1]);\n    var idWithoutIndex = id.substring(0, id.lastIndexOf(extractedIndex) - separator.length);\n    return {\n      id: id,\n      type: extractedType,\n      index: extractedIndex,\n      previousId: idWithoutIndex + separator + (extractedIndex - 1),\n      nextId: idWithoutIndex + separator + (extractedIndex + 1),\n      firstId: idWithoutIndex + separator + \"1\",\n      lastId: idWithoutIndex + separator + document.getElementById(id).parentElement.childNodes.length,\n      mainMenuId: extractedMainMenuType + separator + extractedMainMenuIndex,\n      mainMenuIndex: extractedMainMenuIndex,\n      hiddenFieldsId: id + separator + \"fields\",\n      isFirstElement: extractedIndex <= 1,\n      isSubMenu: splittedId.length > 3,\n      subMenuId: function (typeName) {\n        return id + separator + typeName + separator + \"1\";\n      },\n      replaceMainMenuIndex: function (newIndex) {\n        var newMainMenuIndex = extractedMainMenuType + separator + newIndex;\n        return newMainMenuIndex + id.substring(this.mainMenuId.length);\n      },\n      getNewIndexAfterRemovedMainMenuIndex: function (removedIndex) {\n        if (extractedMainMenuIndex < removedIndex) {\n          return id;\n        }\n        if (extractedMainMenuIndex == removedIndex) {\n          throw new Error(\"index \" + removedIndex + \" should had been removed.\");\n        }\n        return this.replaceMainMenuIndex(extractedMainMenuIndex - 1);\n      },\n      hiddenFields: function () {\n        var hiddenFieldsElement = document.getElementById(id + separator + \"fields\");\n        var hiddenFieldsJson = getPropertyValueWithUndefinedDefault(hiddenFieldsElement, \"textContent\", hiddenFieldsElement.innerText);\n        return JSON.parse(hiddenFieldsJson);\n      }\n    };\n  }\n\n  function focusSearchInput(event, config) {\n    var resultEntry = getEventTarget(event);\n    var inputElement = document.getElementById(config.inputElementId);\n    resultEntry.blur();\n    inputElement.focus();\n    selectionrange.moveCursorToEndOf(inputElement);\n    preventDefaultEventHandling(event); //skips cursor position change on key up once\n    hideSubMenus(config);\n    return inputElement;\n  }\n\n  function focusFirstResult(event, config) {\n    var selectedElement = getEventTarget(event);\n    var firstResult = document.getElementById(config.resultsView.listEntryElementIdPrefix + \"--1\");\n    if (firstResult) {\n      selectedElement.blur();\n      firstResult.focus();\n    }\n  }\n\n  function focusNextSearchResult(event, config) {\n    focusNextMenuEntry(event, function (menuEntryIdProperties) {\n      var next = null;\n      if (menuEntryIdProperties.type === config.resultsView.listEntryElementIdPrefix) {\n        //select first filter entry after last result/match entry\n        //TODO could find a better way (without config?) to navigate from last search result to first options/filter entry\n        next = document.getElementById(config.filterOptionsView.listEntryElementIdPrefix + \"--1\");\n      }\n      if (next === null) {\n        //select first result/match entry after last filter entry (or whenever nothing is found)\n        next = document.getElementById(config.resultsView.listEntryElementIdPrefix + \"--1\");\n      }\n      return next;\n    });\n    hideSubMenus(config);\n  }\n\n  function focusPreviousSearchResult(event, config) {\n    focusPreviousMenuEntry(event, function (menuEntryIdProperties) {\n      var previous = null;\n      if (menuEntryIdProperties.type === config.filterOptionsView.listEntryElementIdPrefix) {\n        //select last result entry when arrow up is pressed on first filter entry\n        //TODO could find a better way (without config?) to navigate from first options/filter entry to last search result?\n        var resultElementsCount = getListElementCountOfType(config.resultsView.listEntryElementIdPrefix);\n        previous = document.getElementById(config.resultsView.listEntryElementIdPrefix + \"--\" + resultElementsCount);\n      }\n      if (previous === null) {\n        //select input, if there is no previous entry.\n        return focusSearchInput(event, config);\n      }\n      return previous;\n    });\n    hideSubMenus(config);\n  }\n\n  /**\n   * Selects and focusses the next menu entry.\n   *\n   * @param {Event} event\n   * @param {module:searchmenu.MenuEntryNotFoundHandler} onMissingNext is called, if no \"next\" entry could be found.\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function focusNextMenuEntry(event, onMissingNext) {\n    var menuEntry = getEventTarget(event);\n    var menuEntryIdProperties = extractListElementIdProperties(menuEntry.id);\n    if (menuEntryIdProperties.isSubMenu) {\n      preventDefaultEventHandling(event); //skips e.g. scrolling whole screen down when focus is inside sub menu\n    }\n    var next = document.getElementById(menuEntryIdProperties.nextId);\n    if (next == null && typeof onMissingNext === \"function\") {\n      next = onMissingNext(menuEntryIdProperties);\n    }\n    if (next == null) {\n      next = document.getElementById(menuEntryIdProperties.firstId);\n    }\n    if (next != null) {\n      menuEntry.blur();\n      next.focus();\n    }\n  }\n\n  /**\n   * Selects and focusses the previous menu entry.\n   *\n   * @param {Event} event\n   * @param {module:searchmenu.MenuEntryNotFoundHandler} onMissingPrevious is called, if no \"previous\" entry could be found.\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function focusPreviousMenuEntry(event, onMissingPrevious) {\n    var menuEntry = getEventTarget(event);\n    var menuEntryIdProperties = extractListElementIdProperties(menuEntry.id);\n    if (menuEntryIdProperties.isSubMenu) {\n      preventDefaultEventHandling(event); //skips e.g. scrolling whole screen up when focus is inside sub menu\n    }\n    var previous = document.getElementById(menuEntryIdProperties.previousId);\n    if (previous == null && typeof onMissingPrevious === \"function\") {\n      previous = onMissingPrevious(menuEntryIdProperties);\n    }\n    if (previous == null) {\n      previous = document.getElementById(menuEntryIdProperties.lastId);\n    }\n    if (previous != null) {\n      menuEntry.blur();\n      previous.focus();\n    }\n  }\n\n  /**\n   * Gets called when a filter option is selected and copies it into the filter view, where all selected filters are collected.\n   * @param {Event} event \n   * @param {DescribedEntry} entries \n   * @param {module:searchmenu.SearchMenuConfig} config \n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function selectFilterOption(event, entries, config) {\n    var selectedEntry = getEventTarget(event);\n    var selectedEntryData = findSelectedEntry(selectedEntry.id, entries, equalProperties([\"fieldName\", \"value\"]));\n    var filterOptionsElement = createFilterOption(selectedEntryData, entries, config.filtersView, config);\n    //TODO could detect default entry if necessary and call \"addDefaultFilterOptionModificationHandler\" instead\n    addFilterOptionModificationHandler(filterOptionsElement, entries, config);\n    preventDefaultEventHandling(event);\n    returnToMainMenu(event);\n  }\n\n  function createFilterOption(selectedEntryData, entries, view, config) {\n    var filterElements = getListElementCountOfType(view.listEntryElementIdPrefix);\n    var filterElementId = view.listEntryElementIdPrefix + \"--\" + (filterElements + 1);\n    var filterCategory = getPropertyValueWithUndefinedDefault(selectedEntryData, \"category\", \"\");\n    var filterElement = getListEntryByFieldName(filterCategory, selectedEntryData.fieldName, view.listParentElementId);\n    var isAlreadyExistingFilter = filterElement != null;\n    if (isAlreadyExistingFilter) {\n      var updatedText = createListEntryInnerHtmlText(selectedEntryData, view, filterElement.id, config.resolveTemplate);\n      filterElement = updateListEntryElement(filterElement, updatedText);\n      return filterElement;\n    }\n    var filterElementText = createListEntryInnerHtmlText(selectedEntryData, view, filterElementId, config.resolveTemplate);\n    filterElement = createListEntryElement(selectedEntryData, view, filterElementId, filterElementText);\n    addClass(resolveStyleClasses(selectedEntryData, view, config.resolveTemplate), filterElement);\n    forEachIdElementIncludingChildren(filterElement, config.onCreatedElement);\n\n    onFilterMenuEntrySelected(filterElement, handleEventWithEntriesAndConfig(entries, config, selectSearchResultToDisplayFilterOptions));\n    addMainMenuNavigationHandlers(filterElement, config);\n\n    return filterElement;\n  }\n\n  function addFilterOptionModificationHandler(filterElement, entries, config) {\n    onSpaceKey(filterElement, toggleFilterEntry);\n    onFilterMenuEntryRemoved(filterElement, handleEventWithConfig(config, removeFilterElement));\n  }\n\n  function addDefaultFilterOptionModificationHandler(filterElement, entries, config) {\n    onSpaceKey(filterElement, handleEventWithEntriesAndConfig(entries, config, selectSearchResultToDisplayFilterOptions));\n    //TODO could reset elements to their default value upon deletion.\n  }\n\n  /**\n   * Searches all child elements of the given parent element\n   * for an entry with the given fieldName contained in the hidden fields structure.\n   *\n   * @param {String} category of the element to search for\n   * @param {String} fieldName of the element to search for\n   * @param {String} listParentElementId id of the parent element that child nodes will be searched\n   * @returns {HTMLElement} returns the element that matches the given fieldName or null, if it hadn't been found.\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function getListEntryByFieldName(category, fieldName, listParentElementId) {\n    var globalCategoryResult = null;\n    var result = forEachListEntryElement(listParentElementId, function (element) {\n      var listElementHiddenFields = extractListElementIdProperties(element.id).hiddenFields();\n      if (listElementHiddenFields.fieldName === fieldName) {\n        var elementCategory = getPropertyValueWithUndefinedDefault(listElementHiddenFields, \"category\", \"\");\n        if (elementCategory === \"\") {\n          globalCategoryResult = element;\n        } else if (elementCategory === category) {\n          return element;\n        }\n      }\n    });\n    return (result != null)? result : globalCategoryResult;\n  }\n\n  /**\n   * Returns the property value of the object or - if undefined - the default value.\n   * @param {Object} object \n   * @param {String} propertyName \n   * @param {Object} defaultValue \n   * @returns the property value of the object or - if not set - the default value.\n   */\n  function getPropertyValueWithUndefinedDefault(object, propertyName, defaultValue) {\n    if (typeof object[propertyName] === \"undefined\") {\n      return defaultValue;\n    } \n    return object[propertyName];\n  }\n\n  /**\n   * Gets the currently selected url template for navigation.\n   *\n   * @param {String} listParentElementId id of the parent element that child nodes will be searched\n   * @param {String} category the url template needs to belong to the same category\n   * @returns {String} returns the url template or null, if nothing could be found\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function getSelectedUrlTemplate(listParentElementId, category) {\n    return forEachListEntryElement(listParentElementId, function (element) {\n      var listElementHiddenFields = extractListElementIdProperties(element.id).hiddenFields();\n      var urlTemplate = getPropertyValueWithUndefinedDefault(listElementHiddenFields, \"urltemplate\", [\"\"])[0];\n      if (urlTemplate === \"\") {\n        return null; // entry has no url template\n      }\n      var elementCategory = getPropertyValueWithUndefinedDefault(listElementHiddenFields, category, \"\");\n      if ((elementCategory != category) && (elementCategory !== \"\")) {\n        return null; // entry belongs to another category\n      }\n      if (hasClass(\"inactive\", element)) {\n        return null; // entry is inactive\n      }\n      return urlTemplate.value;\n    });\n  }\n\n  function getSelectedOptions(listParentElementId) {\n    var result = {};\n    forEachListEntryElement(listParentElementId, function (element) {\n      var hiddenFields = extractListElementIdProperties(element.id).hiddenFields();\n      if (typeof hiddenFields.fieldName === \"undefined\" || typeof hiddenFields.value === \"undefined\") {\n        return null;\n      }\n      if (hasClass(\"inactive\", element)) {\n        return null; // entry is inactive\n      }\n      result[hiddenFields.fieldName] = hiddenFields.value;\n    });\n    return result;\n  }\n\n  /**\n   * This function is called for every html element of a given parent.\n   *\n   * @callback module:searchmenu.ListElementFunction\n   * @param {Element} listElement name of the sub menu entries\n   * @return {Object} optional result to exit the loop or null otherwise.\n   */\n\n  /**\n   * Iterates through all child nodes of the given parent and calls the given function.\n   * If the function returns a value, it will be returned directly.\n   * If the function returns nothing, the iteration continues.\n   * @param {String} listParentElementId \n   * @param {module:searchmenu.ListElementFunction} listEntryElementFunction \n   * @returns {Object} result of the first entry element function, that had returned one, or null.\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function forEachListEntryElement(listParentElementId, listEntryElementFunction) {\n    var listParentElement = document.getElementById(listParentElementId);\n    var i, listElement, result;\n    for (i = 0; i < listParentElement.childNodes.length; i += 1) {\n      listElement = listParentElement.childNodes[i];\n      result = listEntryElementFunction(listElement);\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Extracts the entry data that it referred by the element given by its ID out of the list of data entries.\n   * @param {string} element id\n   * @param {DescribedEntry[]} array of described entries\n   * @param {boolean} equalMatcher takes the existing and the new entry as parameters and returns true if they are considered \"equal\".\n   * @returns {DescribedEntry} described entry out of the given entries, that suits the element given by its id.\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function findSelectedEntry(id, entries, equalsMatcher) {\n    var selectedEntryIdProperties = extractListElementIdProperties(id);\n    var selectedEntryHiddenFields = selectedEntryIdProperties.hiddenFields();\n    var entryIndex;\n    var currentlySelected;\n    for (entryIndex = 0; entryIndex < entries.length; entryIndex += 1) {\n      currentlySelected = entries[entryIndex];\n      if (equalsMatcher(currentlySelected, selectedEntryHiddenFields)) {\n        return currentlySelected;\n      }\n    }\n    console.log(\"error: no selected entry found for id \" + id + \" in \" + entries);\n    return null;\n  }\n\n  function selectSearchResultToDisplayDetails(event, entries, config) {\n    hideSubMenus(config);\n    selectSearchResultToDisplaySubMenu(event, entries, config.detailView, config);\n    preventDefaultEventHandling(event);\n  }\n\n  function selectSearchResultToDisplayFilterOptions(event, entries, config) {\n    hideSubMenus(config);\n    selectSearchResultToDisplaySubMenu(event, entries, config.filterOptionsView, config);\n  }\n\n  function selectSearchResultToDisplaySubMenu(event, entries, subMenuView, config) {\n    clearAllEntriesOfElementWithId(subMenuView.listParentElementId);\n    var selectedElement = getEventTarget(event);\n\n    var subMenuEntry = null;\n    var subMenuElement = null;\n    var subMenuIndex = 0;\n    var subMenuEntryId = selectedElement.id + \"--\" + subMenuView.listEntryElementIdPrefix;\n    var subMenuFirstEntry = null;\n    var subMenuElementText;\n    for (subMenuIndex = 0; subMenuIndex < entries.length; subMenuIndex += 1) {\n      subMenuEntry = entries[subMenuIndex];\n      subMenuEntryId = selectedElement.id + \"--\" + subMenuView.listEntryElementIdPrefix + \"--\" + (subMenuIndex + 1);\n      subMenuElementText = createListEntryInnerHtmlText(subMenuEntry, subMenuView, subMenuEntryId, config.resolveTemplate);\n      subMenuElement = createListEntryElement(subMenuEntry, subMenuView, subMenuEntryId, subMenuElementText);\n      addClass(resolveStyleClasses(subMenuEntry, subMenuView, config.resolveTemplate), subMenuElement);\n      forEachIdElementIncludingChildren(subMenuElement, config.onCreatedElement);\n\n      if (subMenuView.isSelectableFilterOption) {\n        addSubMenuNavigationHandlers(subMenuElement);\n        onSubMenuEntrySelected(subMenuElement, handleEventWithEntriesAndConfig(entries, config, selectFilterOption));\n      }\n      if (subMenuIndex === 0) {\n        subMenuFirstEntry = subMenuElement;\n      }\n    }\n    var divParentOfSelectedElement = parentThatMatches(selectedElement, function (element) {\n      return element.tagName == \"DIV\";\n    });\n    var subMenuViewElement = document.getElementById(subMenuView.viewElementId);\n    var alignedSubMenuXPosition = divParentOfSelectedElement.offsetWidth + 15;\n    var alignedSubMenuYPosition = getYPositionOfElement(selectedElement) + getScrollY();\n    subMenuViewElement.style.left = alignedSubMenuXPosition + \"px\";\n    subMenuViewElement.style.top = alignedSubMenuYPosition + \"px\";\n\n    showElement(subMenuViewElement);\n\n    if (subMenuView.isSelectableFilterOption) {\n      selectedElement.blur();\n      subMenuFirstEntry.focus();\n    }\n  }\n\n  /**\n   * Exit sub menu from event entry and return to main menu.\n   * @param {InputEvent} event\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function returnToMainMenu(event) {\n    var subMenuEntryToExit = getEventTarget(event);\n    var subMenuEntryToExitProperties = extractListElementIdProperties(subMenuEntryToExit.id);\n    var mainMenuEntryToSelect = document.getElementById(subMenuEntryToExitProperties.mainMenuId);\n    subMenuEntryToExit.blur();\n    mainMenuEntryToSelect.focus();\n    hideViewOf(subMenuEntryToExit);\n  }\n\n  function closeAssociatedSubMenus(event, config) {\n    hideSubMenus(config);\n  }\n\n  /**\n   * Prevents the given event inside an event handler to get handled anywhere else.\n   * Pressing the arrow key up can lead to scrolling up the view. This is not useful,\n   * if the arrow key navigates the focus inside a sub menu, that is fully contained inside the current view.\n   * @param {InputEvent} inputevent\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function preventDefaultEventHandling(inputevent) {\n    if (typeof inputevent.preventDefault !== \"undefined\") {\n      inputevent.preventDefault();\n    } else {\n      inputevent.returnValue = false;\n    }\n  }\n\n  //TODO could be extracted as ponyfill\n  /**\n   * Browser compatible Y position of the given element.\n   * @returns {number} y position in pixel\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n   function getYPositionOfElement(element) {\n    var selectedElementPosition = element.getBoundingClientRect();\n    if (typeof selectedElementPosition.y !== \"undefined\") {\n      return selectedElementPosition.y;\n    }\n    return selectedElementPosition.top;\n  }\n\n  //TODO could be extracted as ponyfill\n  /**\n   * Browser compatible version of the standard \"window.scrollY\".\n   * @returns {number} y scroll position in pixel\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function getScrollY() {\n    var supportPageOffset = typeof window.pageYOffset !== \"undefined\";\n    if (supportPageOffset) {\n      return window.pageYOffset;\n    }\n    var isCSS1Compatible = (document.compatMode || \"\") === \"CSS1Compat\";\n    if (isCSS1Compatible) {\n      return document.documentElement.scrollTop;\n    }\n    return document.body.scrollTop;\n  }\n\n  function clearAllEntriesOfElementWithId(elementId) {\n    var node = document.getElementById(elementId);\n\n    // Fastest way to delete child nodes in Chrome and FireFox according to\n    // https://stackoverflow.com/questions/3955229/remove-all-child-elements-of-a-dom-node-in-javascript\n    if (typeof node.cloneNode === \"function\" && typeof node.replaceChild === \"function\") {\n      var cNode = node.cloneNode(false);\n      node.parentNode.replaceChild(cNode, node);\n    } else {\n      node.innerHTML = \"\";\n    }\n  }\n\n  /**\n   * Toggles a filter to inactive and vice versa.\n   * @param {InputEvent} event\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function toggleFilterEntry(event) {\n    preventDefaultEventHandling(event);\n    var filterElement = getEventTarget(event);\n    toggleClass(\"inactive\", filterElement);\n  }\n\n  function removeFilterElement(event, config) {\n    preventDefaultEventHandling(event);\n    focusPreviousSearchResult(event, config);\n    removeChildElement(event);\n  }\n\n  /**\n   * Removes the event target element from its parent.\n   * @param {InputEvent} event\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function removeChildElement(event) {\n    var element = getEventTarget(event);\n    var parentElement = element.parentElement;\n    var indexOfRemovedElement = extractListElementIdProperties(element.id).mainMenuIndex;\n    parentElement.removeChild(element);\n    forEachChildRecursively(parentElement, 0, 5, function (entry) {\n      if (entry.id) {\n        entry.id = extractListElementIdProperties(entry.id).getNewIndexAfterRemovedMainMenuIndex(indexOfRemovedElement);\n      }\n    });\n  }\n\n  function forEachChildRecursively(element, depth, maxDepth, callback) {\n    if (depth > maxDepth || !element.childNodes) {\n      return;\n    }\n    forEachEntryIn(element.childNodes, function (entry) {\n      callback(entry);\n      forEachChildRecursively(entry, depth + 1, maxDepth, callback);\n    });\n  }\n\n  /**\n   * This function will be called for every found element\n   * @callback module:searchmenu.ElementFoundListener\n   * @param {Element} foundElement\n   * @param {boolean} isParent true, if it is the created parent. false, if it is a child within the created parent.\n   */\n\n  /**\n   * The given callback will be called for the given parent and all its direct child nodes, that contain an id property.\n   * @param {Element} element parent to be inspected\n   * @param {module:searchmenu.ElementFoundListener} callback will be called for every found child and the given parent itself\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function forEachIdElementIncludingChildren(element, callback) {\n    if (element.id) {\n      callback(element, true);\n    }\n    forEachEntryIn(element.childNodes, function (element) {\n      if (element.id) {\n        callback(element, false);\n      }\n    });\n  }\n\n  function forEachEntryIn(array, callback) {\n    var index = 0;\n    for (index = 0; index < array.length; index += 1) {\n      callback(array[index], index + 1); //index parameter starts with 1 (1 instead of 0 based)\n    }\n  }\n\n  /**\n   * @param {String} list element type name e.g. \"li\".\n   * @return {number} list element count of the given type\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function getListElementCountOfType(listelementtype) {\n    var firstListEntry = document.getElementById(listelementtype + \"--1\");\n    if (firstListEntry === null) {\n      return 0;\n    }\n    return firstListEntry.parentElement.childNodes.length;\n  }\n\n  /**\n   * Updates an already existing list entry element to be used for search results, filter options, details and filters.\n   *\n   * @param {Node} already existing element\n   * @param {String} text updated element text\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function updateListEntryElement(existingElement, text) {\n    existingElement.innerHTML = text;\n    return existingElement;\n  }\n\n  /**\n   * Creates a new list entry element to be used for search results, filter options, details and filters.\n   *\n   * @param {DescribedEntry} entry entry data\n   * @param {module:searchmenu.SearchViewDescription} view description\n   * @param {number} id id of the list element\n   * @param {String} text text of the list element\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function createListEntryElement(entry, view, id, text) {\n    var listElement = createListElement(text, id, view.listEntryElementTag);\n    var parentElement = document.getElementById(view.listParentElementId);\n    parentElement.appendChild(listElement);\n    return listElement;\n  }\n\n  /**\n   * Creates the inner HTML Text for a list entry to be used for search results, filter options, details and filters.\n   *\n   * @param {DescribedEntry} entry entry data\n   * @param {module:searchmenu.SearchViewDescription} view description\n   * @param {number} id id of the list element\n   * @param {module:searchmenu.TemplateResolver} resolveTemplate function that resolves variables inside a template with contents of a source object\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function createListEntryInnerHtmlText(entry, view, id, resolveTemplate) {\n    //TODO could support template inside html e.g. referenced by id (with convention over code)\n    //TODO should limit length of resolved variables\n    var text = resolveTemplate(view.listEntryTextTemplate, entry);\n    if (typeof entry.summaries !== \"undefined\") {\n      text = resolveTemplate(view.listEntrySummaryTemplate, entry);\n    }\n    var json = JSON.stringify(entry); //needs to be without spaces\n    text += '<p id=\"' + id + '--fields\" style=\"display: none\">' + json + \"</p>\";\n    return text;\n  }\n\n  function resolveStyleClasses(entry, view, resolveTemplate) {\n    var resolvedClasses = resolveTemplate(view.listEntryStyleClassTemplate, entry);\n    resolvedClasses = resolveTemplate(resolvedClasses, { view: view });\n    return resolvedClasses;\n  }\n\n  /**\n   * Creates a new list element to be used for search results.\n   *\n   * @param {string} text inside the list element\n   * @param {number} id id of the list element\n   * @param {string} elementTag tag (e.g. \"li\") for the element\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function createListElement(text, id, elementTag) {\n    var element = document.createElement(elementTag);\n    element.id = id;\n    element.tabIndex = \"0\";\n    element.innerHTML = text;\n    return element;\n  }\n\n  function hideMenu(config) {\n    hide(config.resultsView.viewElementId);\n    hide(config.detailView.viewElementId);\n    hide(config.filterOptionsView.viewElementId);\n  }\n\n  function hideSubMenus(config) {\n    hide(config.detailView.viewElementId);\n    hide(config.filterOptionsView.viewElementId);\n  }\n\n  /**\n   * Shows the element given by its id.\n   * @param {Element}  elementId ID of the element that should be shown\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function show(elementId) {\n    showElement(document.getElementById(elementId));\n  }\n\n  /**\n   * Shows the given element.\n   * @param {Element} element element that should be shown\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function showElement(element) {\n    addClass(\"show\", element);\n  }\n\n  /**\n   * Hides the element given by its id.\n   * @param elementId ID of the element that should be hidden\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function hide(elementId) {\n    hideElement(document.getElementById(elementId));\n  }\n\n  /**\n   * Hides the view (by removing the class \"show\"), that contains the given element.\n   * The view is identified by the existing style class \"show\".\n   * @param {Element} element\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function hideViewOf(element) {\n    var parentWithShowClass = parentThatMatches(element, function (parent) {\n      return hasClass(\"show\", parent);\n    });\n    if (parentWithShowClass != null) {\n      hideElement(parentWithShowClass);\n      return;\n    }\n  }\n\n  /**\n   * @callback module:searchmenu.ElementPredicate\n   * @param {Element} element\n   * @returns {boolean} true, when the predicate matches the given element, false otherwise.\n   */\n\n  /**\n   * Returns the parent of the element (or the element itself), that matches the given predicate.\n   * Returns null, if no element had been found.\n   *\n   * @param {Element} element\n   * @param {module:searchmenu.ElementPredicate} predicate\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function parentThatMatches(element, predicate) {\n    var parentNode = element;\n    while (parentNode != null) {\n      if (predicate(parentNode)) {\n        return parentNode;\n      }\n      parentNode = parentNode.parentNode;\n    }\n    return null;\n  }\n\n  /**\n   * Hides the given element.\n   * @param element element that should be hidden\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function hideElement(element) {\n    removeClass(\"show\", element);\n  }\n\n  function toggleClass(classToToggle, element) {\n    if (hasClass(classToToggle, element)) {\n      removeClass(classToToggle, element);\n    } else {\n      addClass(classToToggle, element);\n    }\n  }\n\n  function addClass(classToAdd, element) {\n    removeClass(classToAdd, element);\n    var separator = element.className.length > 0 ? \" \" : \"\";\n    element.className += separator + classToAdd;\n  }\n\n  function removeClass(classToRemove, element) {\n    var regex = new RegExp(\"\\\\s?\\\\b\" + classToRemove + \"\\\\b\", \"gi\");\n    element.className = element.className.replace(regex, \"\");\n  }\n\n  function hasClass(classToLookFor, element) {\n    return element.className != null && element.className.indexOf(classToLookFor) >= 0;\n  }\n\n  function onMouseOverDelayed(element, delayTime, eventHandler) {\n    addEvent(\"mouseover\", element, function (event) {\n      this.originalEvent = cloneObject(event);\n      this.delayedHandlerTimer = window.setTimeout(function () {\n        eventHandler(typeof this.originalEvent !== \"undefined\" ? this.originalEvent : event);\n      }, delayTime);\n      this.preventEventHandling = function () {\n        if (this.delayedHandlerTimer !== null) {\n          clearTimeout(this.delayedHandlerTimer);\n        }\n      };\n      addEvent(\"mouseout\", element, this.preventEventHandling);\n      addEvent(\"mousedown\", element, this.preventEventHandling);\n      addEvent(\"keydown\", element, this.preventEventHandling);\n    });\n  }\n\n  function cloneObject(source) {\n    var result = {};\n    var propertyNames = Object.keys(source);\n    for (var propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex++) {\n      var propertyName = propertyNames[propertyIndex];\n      var propertyValue = source[propertyName];\n      result[propertyName] = propertyValue;\n    }\n    return result;\n  }\n\n  function onEscapeKey(element, eventHandler) {\n    addEvent(\"keydown\", element, function (event) {\n      if (event.key == \"Escape\" || event.key == \"Esc\" || keyCodeOf(event) == 27) {\n        eventHandler(event);\n      }\n    });\n  }\n\n  function onEnterKey(element, eventHandler) {\n    addEvent(\"keydown\", element, function (event) {\n      if (event.key == \"Enter\" || keyCodeOf(event) == 13) {\n        eventHandler(event);\n      }\n    });\n  }\n\n  function onSpaceKey(element, eventHandler) {\n    addEvent(\"keydown\", element, function (event) {\n      if (event.key == \" \" || event.key == \"Spacebar\" || keyCodeOf(event) == 32) {\n        eventHandler(event);\n      }\n    });\n  }\n\n  function onDeleteKey(element, eventHandler) {\n    addEvent(\"keydown\", element, function (event) {\n      if (event.key == \"Del\" || event.key == \"Delete\" || keyCodeOf(event) == 46) {\n        eventHandler(event);\n      }\n    });\n  }\n\n  function onBackspaceKey(element, eventHandler) {\n    addEvent(\"keydown\", element, function (event) {\n      if (event.key == \"Backspace\" || keyCodeOf(event) == 8) {\n        eventHandler(event);\n      }\n    });\n  }\n\n  function onArrowUpKey(element, eventHandler) {\n    addEvent(\"keydown\", element, function (event) {\n      if (event.key == \"ArrowUp\" || event.key == \"Up\" || keyCodeOf(event) == 38) {\n        eventHandler(event);\n      }\n    });\n  }\n\n  function onArrowDownKey(element, eventHandler) {\n    addEvent(\"keydown\", element, function (event) {\n      if (event.key == \"ArrowDown\" || event.key == \"Down\" || keyCodeOf(event) == 40) {\n        eventHandler(event);\n      }\n    });\n  }\n  function onArrowRightKey(element, eventHandler) {\n    addEvent(\"keydown\", element, function (event) {\n      if (event.key == \"ArrowRight\" || event.key == \"Right\" || keyCodeOf(event) == 39) {\n        eventHandler(event);\n      }\n    });\n  }\n\n  function onArrowLeftKey(element, eventHandler) {\n    addEvent(\"keydown\", element, function (event) {\n      if (event.key == \"ArrowLeft\" || event.key == \"Left\" || keyCodeOf(event) == 37) {\n        eventHandler(event);\n      }\n    });\n  }\n\n  function addEvent(eventName, element, eventHandler) {\n    eventlistener.addEventListener(eventName, element, eventHandler);\n  }\n\n  /**\n   * @returns {Element} target of the event\n   */\n  function getEventTarget(event) {\n    return eventtarget.getEventTarget(event);\n  }\n\n  /**\n   * Returns the key code of the event or -1 if it is no available.\n   * @param {KeyboardEvent} event\n   * @return key code or -1 if not available\n   * @protected\n   * @memberof module:searchmenu.SearchMenuUI\n   */\n  function keyCodeOf(event) {\n    return typeof event.keyCode === \"undefined\" ? -1 : event.keyCode;\n  }\n\n  return instance;\n})();"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$5168cbe7a8f000bf$var$module","$5168cbe7a8f000bf$var$eventtarget","getEventTarget","event","currentTarget","srcElement","$a4ad8f7f94ee3163$var$module","$a4ad8f7f94ee3163$var$selectionrange","moveCursorToEndOf","element","setSelectionRange","value","length","selectionStart","selectionEnd","createTextRange","range","collapse","moveEnd","moveStart","select","$ff0e44fa82d1ec2e$var$module","$ff0e44fa82d1ec2e$var$eventlistener","addEventListener","eventName","eventHandler","attachEvent","$85319350d303889b$var$module","$85319350d303889b$var$datarestructorInternalCreateIfNotExists","objectToCheck","$85319350d303889b$var$searchmenu","internalCreateIfNotExists","$85319350d303889b$var$eventtarget","$85319350d303889b$var$selectionrange","$85319350d303889b$var$eventlistener","SearchViewDescriptionBuilder","isSpecifiedString","template","defaultTemplate","defaultSummaryTemplate","defaultStyleClassTemplate","description","viewElementId","listParentElementId","listEntryElementIdPrefix","listEntryElementTag","listEntryTextTemplate","listEntrySummaryTemplate","listEntryStyleClassTemplate","isSelectableFilterOption","defaultValue","build","SearchMenuAPI","addEvent","removeClass","classToRemove","regex","RegExp","className","replace","config","triggerSearch","convertData","sourceData","resolveTemplate","addPredefinedParametersTo","onCreatedElement","navigateTo","destinationUrl","window","location","href","createdElementListeners","searchAreaElementId","inputElementId","searchTextParameterName","resultsView","detailView","filterOptionsView","filtersView","waitBeforeClose","waitBeforeSearch","waitBeforeMouseOver","searchService","service","dataConverter","converter","templateResolver","resolver","adder","setElementCreatedHandler","listener","addElementCreatedHandler","push","addFocusStyleClassOnEveryCreatedElement","focusStyleClassName","isParent","classToAdd","separator","view","ms","start","index","SearchMenuUI","equalProperties","propertyNames","existingObject","newObject","addMainMenuNavigationHandlers","onArrowDownKey","handleEventWithConfig","focusNextSearchResult","onArrowUpKey","focusPreviousSearchResult","onEscapeKey","focusSearchInput","onArrowLeftKey","closeAssociatedSubMenus","onMenuEntryChosen","onEnterKey","handleEventWithEntriesAndConfig","entries","extractListElementIdProperties","splittedId","split","console","log","extractedMainMenuType","extractedMainMenuIndex","parseInt","extractedType","extractedIndex","idWithoutIndex","substring","lastIndexOf","type","previousId","nextId","firstId","lastId","document","getElementById","parentElement","childNodes","mainMenuId","mainMenuIndex","hiddenFieldsId","isFirstElement","isSubMenu","subMenuId","typeName","replaceMainMenuIndex","newIndex","newMainMenuIndex","getNewIndexAfterRemovedMainMenuIndex","removedIndex","hiddenFields","hiddenFieldsElement","JSON","parse","getPropertyValueWithUndefinedDefault","innerText","resultEntry","inputElement","blur","focus","preventDefaultEventHandling","hideSubMenus","focusFirstResult","selectedElement","firstResult","focusNextMenuEntry","menuEntryIdProperties","next","focusPreviousMenuEntry","previous","resultElementsCount","getListElementCountOfType","onMissingNext","menuEntry","onMissingPrevious","selectFilterOption","addFilterOptionModificationHandler","filterElement","onSpaceKey","toggleFilterEntry","removeFilterElement","key","keyCodeOf","createFilterOption","findSelectedEntry","equalsMatcher","entryIndex","currentlySelected","selectedEntryHiddenFields","selectedEntryIdProperties","selectedEntry","returnToMainMenu","selectedEntryData","category","fieldName","globalCategoryResult","result","filterElements","filterElementId","forEachListEntryElement","listElementHiddenFields","elementCategory","existingElement","updatedText","createListEntryInnerHtmlText","innerHTML","filterElementText","createListEntryElement","addClass","resolveStyleClasses","forEachIdElementIncludingChildren","selectSearchResultToDisplayFilterOptions","onArrowRightKey","object","propertyName","listEntryElementFunction","i","listParentElement","selectSearchResultToDisplayDetails","selectSearchResultToDisplaySubMenu","subMenuView","selectedElementPosition","elementId","node","cloneNode","replaceChild","cNode","parentNode","subMenuElementText","subMenuEntry","subMenuElement","subMenuIndex","subMenuEntryId","subMenuFirstEntry","divParentOfSelectedElement","parentThatMatches","tagName","subMenuViewElement","alignedSubMenuXPosition","offsetWidth","alignedSubMenuYPosition","getYPositionOfElement","getBoundingClientRect","y","top","pageYOffset","compatMode","documentElement","scrollTop","body","style","left","parentWithShowClass","subMenuEntryToExit","subMenuEntryToExitProperties","mainMenuEntryToSelect","parent","hasClass","hideElement","inputevent","preventDefault","returnValue","classToToggle","indexOfRemovedElement","removeChild","forEachChildRecursively","depth","maxDepth","callback","forEachEntryIn","entry","array","listelementtype","firstListEntry","text","elementTag","listElement","createElement","tabIndex","appendChild","summaries","stringify","resolvedClasses","hideMenu","hide","show","predicate","classToLookFor","indexOf","keyCode","currentSearchText","focusOutTimer","waitBeforeSearchTimer","search","clearTimeout","newSearchText","setTimeout","updateSearch","searchText","searchParameters","matchList","jsonResult","jsonResults","addResult","listElementId","resultElementText","resultElement","details","onMouseOverDelayed","delayTime","originalEvent","cloneObject","source","Object","keys","propertyIndex","propertyValue","delayedHandlerTimer","preventEventHandling","selectedUrlTemplate","getSelectedUrlTemplate","urlTemplate","targetURL","options","insertAtBeginningIfMissing","entryToAdd","equalMatcher","alreadyContainsEntryToAdd","searchareaElement","searchInputElement"],"version":3,"file":"search-menu-ui.js.map","sourceRoot":"../"}
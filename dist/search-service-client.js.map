{"mappings":"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","sources":["<anon>","src/js/ponyfills/xmlHttpRequestPonyfill.js","src/js/search-service-client.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"1rK4P\", function(module, exports) {\n\"use strict\";\nvar $10dc0df5987ff626$var$module = $10dc0df5987ff626$var$module || {}; // Fallback for vanilla js without modules\n/**\n * @namespace xmlHttpRequest\n */ var $10dc0df5987ff626$var$xmlHttpRequest = $10dc0df5987ff626$var$module.exports = {}; // Fallback for vanilla js without modules\n/**\n * Provide the XMLHttpRequest constructor for Internet Explorer 5.x-6.x:\n * Other browsers (including Internet Explorer 7.x-9.x) do not redefine\n * XMLHttpRequest if it already exists.\n *\n * This example is based on findings at:\n * http://blogs.msdn.com/xmlteam/archive/2006/10/23/using-the-right-version-of-msxml-in-internet-explorer.aspx\n * @returns {XMLHttpRequest}\n * @memberof xmlHttpRequest\n */ $10dc0df5987ff626$var$xmlHttpRequest.getXMLHttpRequest = function() {\n    if (typeof XMLHttpRequest !== \"undefined\") try {\n        var request = new XMLHttpRequest();\n        request.status; //try, if status is accessible. Fails in IE5.\n        return request;\n    } catch (e) {\n        console.log(\"XMLHttpRequest not available: \" + e);\n    }\n    try {\n        return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\");\n    } catch (e) {\n        console.log(\"XMLHttpRequest Msxml2.XMLHTTP.6.0 not available: \" + e);\n    }\n    try {\n        return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\");\n    } catch (e) {\n        console.log(\"XMLHttpRequest Msxml2.XMLHTTP.3.0 not available: \" + e);\n    }\n    try {\n        return new ActiveXObject(\"Microsoft.XMLHTTP\");\n    } catch (e) {\n        console.log(\"XMLHttpRequest Microsoft.XMLHTTP not available: \" + e);\n    }\n    // Microsoft.XMLHTTP points to Msxml2.XMLHTTP and is redundant\n    throw new Error(\"This browser does not support XMLHttpRequest.\");\n};\n\n});\n\n/**\n * @file Provides the (http) client/connection to the search backend service.\n * @version {@link https://github.com/JohT/search-menu-ui/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */ \"use strict\";\nvar $13844935e7c60f62$var$module = $13844935e7c60f62$var$datarestructorInternalCreateIfNotExists($13844935e7c60f62$var$module); // Fallback for vanilla js without modules\nfunction $13844935e7c60f62$var$datarestructorInternalCreateIfNotExists(objectToCheck) {\n    return objectToCheck || {};\n}\n/**\n * Search-Menu Service-Client.\n * It provides the (http) client/connection to the search backend service.\n * @module searchMenuServiceClient\n */ var $13844935e7c60f62$var$searchMenuServiceClient = $13844935e7c60f62$var$module.exports = {}; // Export module for npm...\n$13844935e7c60f62$var$searchMenuServiceClient.internalCreateIfNotExists = $13844935e7c60f62$var$datarestructorInternalCreateIfNotExists;\n\nvar $13844935e7c60f62$var$xmlHttpRequest = $13844935e7c60f62$var$xmlHttpRequest || (parcelRequire(\"1rK4P\")); // supports vanilla js & npm\n$13844935e7c60f62$var$searchMenuServiceClient.HttpSearchConfig = function() {\n    /**\n   * Configures and builds the {@link module:searchMenuServiceClient.HttpClient}.\n   * DescribedDataField is the main element of the restructured data and therefore considered \"public\".\n   * @constructs HttpSearchConfig\n   * @alias module:searchMenuServiceClient.HttpSearchConfig\n   */ function HttpSearchConfig() {\n        /**\n     * HTTP Search Configuration.\n     * @property {string} searchUrlTemplate URL that is called for every search request. It may include variables in double curly brackets like `{{searchtext}}`.\n     * @property {string} [searchMethod=\"POST\"] HTTP Method, that is used for every search request.\n     * @property {string} [searchContentType=\"application/json\"] HTTP MIME-Type of the body, that is used for every search request.\n     * @property {string} searchBodyTemplate HTTP body template, that is used for every search request. It may include variables in double curly brackets like `{{jsonSearchParameters}}`.\n     * @property {XMLHttpRequest} [httpRequest=new XMLHttpRequest()] Contains the XMLHttpRequest that is used to handle HTTP requests and responses. Defaults to XMLHttpRequest.\n     * @property {boolean} [debugMode=false] Adds detailed logging for development and debugging.\n     */ this.config = {\n            searchUrlTemplate: \"\",\n            searchMethod: \"POST\",\n            searchContentType: \"application/json\",\n            searchBodyTemplate: null,\n            /**\n       * Resolves variables in the search url template based on the given search parameters object.\n       * The variable {{jsonSearchParameters}} will be replaced by the JSON of all search parameters.\n       * @param {Object} searchParameters object properties will be used to replace the variables of the searchUrlTemplate\n       */ resolveSearchUrl: function(searchParameters) {\n                return resolveTemplate(this.searchUrlTemplate, searchParameters, this.debugMode);\n            },\n            /**\n       * Resolves variables in the search body template based on the given search parameters object.\n       * The variable {{jsonSearchParameters}} will be replaced by the JSON of all search parameters.\n       * @param {Object} searchParameters object properties will be used to replace the variables of the searchBodyTemplate\n       */ resolveSearchBody: function(searchParameters) {\n                return resolveTemplate(this.searchBodyTemplate, searchParameters, this.debugMode);\n            },\n            httpRequest: null,\n            debugMode: false\n        };\n        /**\n     * Sets the url for the HTTP request for the search.\n     * It may include variables in double curly brackets like {{searchtext}}.\n     * @param {String} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */ this.searchUrlTemplate = function(value) {\n            this.config.searchUrlTemplate = value;\n            return this;\n        };\n        /**\n     * Sets the HTTP method for the search. Defaults to \"POST\".\n     * @param {String} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */ this.searchMethod = function(value) {\n            this.config.searchMethod = value;\n            return this;\n        };\n        /**\n     * Sets the HTTP content type of the request body. Defaults to \"application/json\".\n     * @param {String} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */ this.searchContentType = function(value) {\n            this.config.searchContentType = value;\n            return this;\n        };\n        /**\n     * Sets the HTTP request body template that may contain variables (e.g. {{searchParameters}}) in double curly brackets, or null if there is none.\n     * @param {String} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */ this.searchBodyTemplate = function(value) {\n            this.config.searchBodyTemplate = value;\n            return this;\n        };\n        /**\n     * Sets the HTTP-Request-Object. Defaults to XMLHttpRequest if not set.\n     * @param {String} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */ this.httpRequest = function(value) {\n            this.config.httpRequest = value;\n            return this;\n        };\n        /**\n     * Sets the debug mode, that prints some more info to the console.\n     * @param {boolean} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */ this.debugMode = function(value) {\n            this.config.debugMode = value === true;\n            return this;\n        };\n        /**\n     * Uses the configuration to build the http client that provides the function \"search\" (parameters: searchParameters, onSuccess callback).\n     * @returns {module:searchMenuServiceClient.HttpClient}\n     */ this.build = function() {\n            if (!this.config.httpRequest) this.config.httpRequest = $13844935e7c60f62$var$xmlHttpRequest.getXMLHttpRequest();\n            return new $13844935e7c60f62$var$searchMenuServiceClient.HttpClient(this.config);\n        };\n    }\n    /**\n   * Resolves variables in the template based on the given search parameters object.\n   * The variable {{jsonSearchParameters}} will be replaced by the JSON of all search parameters.\n   * @param {String} template contains variables in double curly brackets that should be replaced by the values of the parameterSourceObject.\n   * @param {Object} parameterSourceObject object properties will be used to replace the variables of the template\n   * @param {boolean} debugMode enables/disables extended logging for debugging\n   * @memberof module:searchMenuServiceClient.HttpSearchConfig\n   * @protected\n   */ function resolveTemplate(template, parameterSourceObject, debugMode) {\n        if (template == null) return null;\n        var jsonSearchParameters = JSON.stringify(parameterSourceObject);\n        var resolvedBody = template;\n        resolvedBody = resolveVariableInTemplate(resolvedBody, \"jsonSearchParameters\", jsonSearchParameters);\n        resolvedBody = resolveVariablesInTemplate(resolvedBody, parameterSourceObject);\n        if (debugMode) {\n            console.log(\"template=\" + template);\n            console.log(\"{{jsonSearchParameters}}=\" + jsonSearchParameters);\n            console.log(\"resolved template=\" + resolvedBody);\n        }\n        return resolvedBody;\n    }\n    function resolveVariablesInTemplate(templateString, sourceDataObject) {\n        var resolvedString = templateString;\n        forEachFieldsIn(sourceDataObject, function(fieldName, fieldValue) {\n            resolvedString = resolveVariableInTemplate(resolvedString, fieldName, fieldValue);\n        });\n        return resolvedString;\n    }\n    function resolveVariableInTemplate(templateString, fieldName, fieldValue) {\n        //TODO could there be a better compatible solution to replace ALL occurrences instead of creating regular expressions?\n        var variableReplaceRegExp = new RegExp(\"\\\\{\\\\{\" + escapeCharsForRegEx(fieldName) + \"\\\\}\\\\}\", \"gm\");\n        return templateString.replace(variableReplaceRegExp, fieldValue);\n    }\n    function escapeCharsForRegEx(characters) {\n        var nonWordCharactersRegEx = new RegExp(\"([^-\\\\w])\", \"gi\");\n        return characters.replace(nonWordCharactersRegEx, \"\\\\$1\");\n    }\n    function forEachFieldsIn(object, fieldNameAndValueConsumer) {\n        var fieldNames = Object.keys(object);\n        var index, fieldName, fieldValue;\n        for(index = 0; index < fieldNames.length; index += 1){\n            fieldName = fieldNames[index];\n            fieldValue = object[fieldName];\n            fieldNameAndValueConsumer(fieldName, fieldValue);\n        }\n    }\n    return HttpSearchConfig;\n}();\n/**\n * This function will be called, when search results are available.\n * @callback module:searchMenuServiceClient.HttpClient.SearchServiceResultAvailable\n * @param {Object} searchResultData already parsed data object containing the result of the search\n */ $13844935e7c60f62$var$searchMenuServiceClient.HttpClient = function() {\n    /**\n   * HttpClient.\n   *\n   * Contains the \"backend-connection\" of the search bar. It submits the search query,\n   * parses the results and informs the callback as soon as these results are available.\n   * @example new searchMenuServiceClient.HttpSearchConfig()....build();\n   * @param {module:searchMenuServiceClient.HttpSearchConfig} config \n   * @constructs HttpClient\n   * @alias module:searchMenuServiceClient.HttpClient\n   */ var instance = function(config) {\n        /**\n     * Configuration for the search HTTP requests.\n     * @type {module:searchMenuServiceClient.HttpSearchConfig}\n     */ this.config = config;\n        /**\n     * This function will be called to trigger search (calling the search backend).\n     * @function\n     * @param {Object} searchParameters object that contains all parameters as properties. It will be converted to JSON.\n     * @param {module:searchMenuServiceClient.HttpClient.SearchServiceResultAvailable} onSearchResultsAvailable will be called when search results are available.\n     */ this.search = createSearchFunction(this.config, this.config.httpRequest);\n    };\n    /**\n   * Creates the search service function that can be bound to the search menu.\n   * @param {module:searchMenuServiceClient.HttpSearchConfig} config Configuration for the search HTTP requests.\n   * @param {XMLHttpRequest} httpRequest Takes the HTTP-Request-Object.\n   * @returns {module:searchMenuServiceClient.SearchService}\n   * @memberof module:searchMenuServiceClient.HttpClient\n   * @private\n   */ function createSearchFunction(config, httpRequest) {\n        return function(searchParameters, onJsonResultReceived) {\n            var onFailure = function(resultText, httpStatus) {\n                console.error(\"search failed with status code \" + httpStatus + \": \" + resultText);\n            };\n            var searchUrl = config.resolveSearchUrl(searchParameters);\n            var searchBody = config.resolveSearchBody(searchParameters);\n            var request = {\n                url: searchUrl,\n                method: config.searchMethod,\n                contentType: config.searchContentType,\n                body: searchBody\n            };\n            if (config.debugMode) onJsonResultReceived = loggedSuccess(onJsonResultReceived);\n            httpRequestJson(request, httpRequest, onJsonResultReceived, onFailure);\n        };\n    }\n    function loggedSuccess(onSuccess) {\n        return function(jsonResult, status) {\n            console.log(\"successful search response with code \" + status + \": \" + JSON.stringify(jsonResult, null, 2));\n            onSuccess(jsonResult, status);\n        };\n    }\n    /**\n   * This function will be called when a already parsed response of the HTTP request is available.\n   * @callback module:searchMenuServiceClient.HttpClient.ParsedHttpResponseAvailable\n   * @param {Object} resultData already parsed data object containing the results of the HTTP request\n   * @param {number} httpStatus HTTP response status\n   */ /**\n   * This function will be called when a response of the HTTP request is available as text.\n   * @callback module:searchMenuServiceClient.HttpClient.TextHttpResponseAvailable\n   * @param {Object} resultText response body as text\n   * @param {number} httpStatus HTTP response status\n   */ /**\n   * Executes an HTTP \"AJAX\" request.\n   *\n   * @param {Object} request - flattened json from search query result\n   * @param {string} request.url - name of the property in hierarchical order separated by points\n   * @param {string} request.method - value of the property as string\n   * @param {string} request.contentType - value of the property as string\n   * @param {string} request.body - value of the property as string\n   * @param {Object} httpRequest - Browser provided object to use for the HTTP request.\n   * @param {module:searchMenuServiceClient.HttpClient.ParsedHttpResponseAvailable} onSuccess - will be called when the request was successful.\n   * @param {module:searchMenuServiceClient.HttpClient.TextHttpResponseAvailable} onFailure - will be called with the error message as text\n   * @memberof module:searchMenuServiceClient.HttpClient\n   * @private\n   */ function httpRequestJson(request, httpRequest, onSuccess, onFailure) {\n        httpRequest.onreadystatechange = function() {\n            if (httpRequest.readyState === 4) {\n                if (httpRequest.status >= 200 && httpRequest.status <= 299) {\n                    var jsonResult = JSON.parse(httpRequest.responseText);\n                    onSuccess(jsonResult, httpRequest.status);\n                } else onFailure(httpRequest.responseText, httpRequest.status);\n            }\n        };\n        httpRequest.open(request.method, request.url, true);\n        httpRequest.setRequestHeader(\"Content-Type\", request.contentType);\n        httpRequest.send(request.body);\n    }\n    return instance;\n}();\n\n\n//# sourceMappingURL=search-service-client.js.map\n","\"use strict\";\n\nvar module = module || {}; // Fallback for vanilla js without modules\n/**\n * @namespace xmlHttpRequest\n */\nvar xmlHttpRequest = module.exports={}; // Fallback for vanilla js without modules\n\n/**\n * Provide the XMLHttpRequest constructor for Internet Explorer 5.x-6.x:\n * Other browsers (including Internet Explorer 7.x-9.x) do not redefine\n * XMLHttpRequest if it already exists.\n *\n * This example is based on findings at:\n * http://blogs.msdn.com/xmlteam/archive/2006/10/23/using-the-right-version-of-msxml-in-internet-explorer.aspx\n * @returns {XMLHttpRequest}\n * @memberof xmlHttpRequest\n */\n xmlHttpRequest.getXMLHttpRequest = function () {\n  if (typeof XMLHttpRequest !== \"undefined\") {\n    try {\n      var request = new XMLHttpRequest();\n      request.status; //try, if status is accessible. Fails in IE5.\n      return request;\n    } catch (e) {\n      console.log(\"XMLHttpRequest not available: \" + e);\n    }\n  }\n  try {\n    return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\");\n  } catch (e) {\n    console.log(\"XMLHttpRequest Msxml2.XMLHTTP.6.0 not available: \" + e);\n  }\n  try {\n    return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\");\n  } catch (e) {\n    console.log(\"XMLHttpRequest Msxml2.XMLHTTP.3.0 not available: \" + e);\n  }\n  try {\n    return new ActiveXObject(\"Microsoft.XMLHTTP\");\n  } catch (e) {\n    console.log(\"XMLHttpRequest Microsoft.XMLHTTP not available: \" + e);\n  }\n  // Microsoft.XMLHTTP points to Msxml2.XMLHTTP and is redundant\n  throw new Error(\"This browser does not support XMLHttpRequest.\");\n};\n","/**\n * @file Provides the (http) client/connection to the search backend service.\n * @version {@link https://github.com/JohT/search-menu-ui/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */\n\n\"use strict\";\n\nvar module = datarestructorInternalCreateIfNotExists(module); // Fallback for vanilla js without modules\n\nfunction datarestructorInternalCreateIfNotExists(objectToCheck) {\n  return objectToCheck || {};\n}\n\n/**\n * Search-Menu Service-Client.\n * It provides the (http) client/connection to the search backend service.\n * @module searchMenuServiceClient\n */\nvar searchMenuServiceClient = (module.exports = {}); // Export module for npm...\nsearchMenuServiceClient.internalCreateIfNotExists = datarestructorInternalCreateIfNotExists;\n\nvar xmlHttpRequest = xmlHttpRequest || require(\"../../src/js/ponyfills/xmlHttpRequestPonyfill\"); // supports vanilla js & npm\n\n searchMenuServiceClient.HttpSearchConfig = (function () {\n  /**\n   * Configures and builds the {@link module:searchMenuServiceClient.HttpClient}.\n   * DescribedDataField is the main element of the restructured data and therefore considered \"public\".\n   * @constructs HttpSearchConfig\n   * @alias module:searchMenuServiceClient.HttpSearchConfig\n   */\n  function HttpSearchConfig() {\n    /**\n     * HTTP Search Configuration.\n     * @property {string} searchUrlTemplate URL that is called for every search request. It may include variables in double curly brackets like `{{searchtext}}`.\n     * @property {string} [searchMethod=\"POST\"] HTTP Method, that is used for every search request.\n     * @property {string} [searchContentType=\"application/json\"] HTTP MIME-Type of the body, that is used for every search request.\n     * @property {string} searchBodyTemplate HTTP body template, that is used for every search request. It may include variables in double curly brackets like `{{jsonSearchParameters}}`.\n     * @property {XMLHttpRequest} [httpRequest=new XMLHttpRequest()] Contains the XMLHttpRequest that is used to handle HTTP requests and responses. Defaults to XMLHttpRequest.\n     * @property {boolean} [debugMode=false] Adds detailed logging for development and debugging.\n     */\n    this.config = {\n      searchUrlTemplate: \"\",\n      searchMethod: \"POST\",\n      searchContentType: \"application/json\",\n      searchBodyTemplate: null,\n      /**\n       * Resolves variables in the search url template based on the given search parameters object.\n       * The variable {{jsonSearchParameters}} will be replaced by the JSON of all search parameters.\n       * @param {Object} searchParameters object properties will be used to replace the variables of the searchUrlTemplate\n       */\n      resolveSearchUrl: function (searchParameters) {\n        return resolveTemplate(this.searchUrlTemplate, searchParameters, this.debugMode);\n      },\n      /**\n       * Resolves variables in the search body template based on the given search parameters object.\n       * The variable {{jsonSearchParameters}} will be replaced by the JSON of all search parameters.\n       * @param {Object} searchParameters object properties will be used to replace the variables of the searchBodyTemplate\n       */\n      resolveSearchBody: function (searchParameters) {\n        return resolveTemplate(this.searchBodyTemplate, searchParameters, this.debugMode);\n      },\n      httpRequest: null,\n      debugMode: false\n    };\n    /**\n     * Sets the url for the HTTP request for the search.\n     * It may include variables in double curly brackets like {{searchtext}}.\n     * @param {String} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */\n    this.searchUrlTemplate = function (value) {\n      this.config.searchUrlTemplate = value;\n      return this;\n    };\n    /**\n     * Sets the HTTP method for the search. Defaults to \"POST\".\n     * @param {String} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */\n    this.searchMethod = function (value) {\n      this.config.searchMethod = value;\n      return this;\n    };\n    /**\n     * Sets the HTTP content type of the request body. Defaults to \"application/json\".\n     * @param {String} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */\n    this.searchContentType = function (value) {\n      this.config.searchContentType = value;\n      return this;\n    };\n    /**\n     * Sets the HTTP request body template that may contain variables (e.g. {{searchParameters}}) in double curly brackets, or null if there is none.\n     * @param {String} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */\n    this.searchBodyTemplate = function (value) {\n      this.config.searchBodyTemplate = value;\n      return this;\n    };\n    /**\n     * Sets the HTTP-Request-Object. Defaults to XMLHttpRequest if not set.\n     * @param {String} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */\n    this.httpRequest = function (value) {\n      this.config.httpRequest = value;\n      return this;\n    };\n    /**\n     * Sets the debug mode, that prints some more info to the console.\n     * @param {boolean} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */\n    this.debugMode = function (value) {\n      this.config.debugMode = value === true;\n      return this;\n    };\n    /**\n     * Uses the configuration to build the http client that provides the function \"search\" (parameters: searchParameters, onSuccess callback).\n     * @returns {module:searchMenuServiceClient.HttpClient}\n     */\n    this.build = function () {\n      if (!this.config.httpRequest) {\n        this.config.httpRequest = xmlHttpRequest.getXMLHttpRequest();\n      }\n      return new searchMenuServiceClient.HttpClient(this.config);\n    };\n  }\n\n  /**\n   * Resolves variables in the template based on the given search parameters object.\n   * The variable {{jsonSearchParameters}} will be replaced by the JSON of all search parameters.\n   * @param {String} template contains variables in double curly brackets that should be replaced by the values of the parameterSourceObject.\n   * @param {Object} parameterSourceObject object properties will be used to replace the variables of the template\n   * @param {boolean} debugMode enables/disables extended logging for debugging\n   * @memberof module:searchMenuServiceClient.HttpSearchConfig\n   * @protected\n   */\n  function resolveTemplate(template, parameterSourceObject, debugMode) {\n    if (template == null) {\n      return null;\n    }\n    var jsonSearchParameters = JSON.stringify(parameterSourceObject);\n    var resolvedBody = template;\n    resolvedBody = resolveVariableInTemplate(resolvedBody, \"jsonSearchParameters\", jsonSearchParameters);\n    resolvedBody = resolveVariablesInTemplate(resolvedBody, parameterSourceObject);\n    if (debugMode) {\n      console.log(\"template=\" + template);\n      console.log(\"{{jsonSearchParameters}}=\" + jsonSearchParameters);\n      console.log(\"resolved template=\" + resolvedBody);\n    }\n    return resolvedBody;\n  }\n\n  function resolveVariablesInTemplate(templateString, sourceDataObject) {\n    var resolvedString = templateString;\n    forEachFieldsIn(sourceDataObject, function (fieldName, fieldValue) {\n      resolvedString = resolveVariableInTemplate(resolvedString, fieldName, fieldValue);\n    });\n    return resolvedString;\n  }\n\n  function resolveVariableInTemplate(templateString, fieldName, fieldValue) {\n    //TODO could there be a better compatible solution to replace ALL occurrences instead of creating regular expressions?\n    var variableReplaceRegExp = new RegExp(\"\\\\{\\\\{\" + escapeCharsForRegEx(fieldName) + \"\\\\}\\\\}\", \"gm\");\n    return templateString.replace(variableReplaceRegExp, fieldValue);\n  }\n\n  function escapeCharsForRegEx(characters) {\n    var nonWordCharactersRegEx = new RegExp(\"([^-\\\\w])\", \"gi\");\n    return characters.replace(nonWordCharactersRegEx, \"\\\\$1\");\n  }\n\n  function forEachFieldsIn(object, fieldNameAndValueConsumer) {\n    var fieldNames = Object.keys(object);\n    var index, fieldName, fieldValue;\n    for (index = 0; index < fieldNames.length; index += 1) {\n      fieldName = fieldNames[index];\n      fieldValue = object[fieldName];\n      fieldNameAndValueConsumer(fieldName, fieldValue);\n    }\n  }\n\n  return HttpSearchConfig;\n}());\n\n/**\n * This function will be called, when search results are available.\n * @callback module:searchMenuServiceClient.HttpClient.SearchServiceResultAvailable\n * @param {Object} searchResultData already parsed data object containing the result of the search\n */\n\nsearchMenuServiceClient.HttpClient = (function () {\n  /**\n   * HttpClient.\n   *\n   * Contains the \"backend-connection\" of the search bar. It submits the search query,\n   * parses the results and informs the callback as soon as these results are available.\n   * @example new searchMenuServiceClient.HttpSearchConfig()....build();\n   * @param {module:searchMenuServiceClient.HttpSearchConfig} config \n   * @constructs HttpClient\n   * @alias module:searchMenuServiceClient.HttpClient\n   */\n  var instance = function (config) {\n    /**\n     * Configuration for the search HTTP requests.\n     * @type {module:searchMenuServiceClient.HttpSearchConfig}\n     */\n    this.config = config;\n    /**\n     * This function will be called to trigger search (calling the search backend).\n     * @function\n     * @param {Object} searchParameters object that contains all parameters as properties. It will be converted to JSON.\n     * @param {module:searchMenuServiceClient.HttpClient.SearchServiceResultAvailable} onSearchResultsAvailable will be called when search results are available.\n     */\n    this.search = createSearchFunction(this.config, this.config.httpRequest);\n  };\n\n  /**\n   * Creates the search service function that can be bound to the search menu.\n   * @param {module:searchMenuServiceClient.HttpSearchConfig} config Configuration for the search HTTP requests.\n   * @param {XMLHttpRequest} httpRequest Takes the HTTP-Request-Object.\n   * @returns {module:searchMenuServiceClient.SearchService}\n   * @memberof module:searchMenuServiceClient.HttpClient\n   * @private\n   */\n  function createSearchFunction(config, httpRequest) {\n    return function (searchParameters, onJsonResultReceived) {\n      var onFailure = function (resultText, httpStatus) {\n        console.error(\"search failed with status code \" + httpStatus + \": \" + resultText);\n      };\n      var searchUrl = config.resolveSearchUrl(searchParameters);\n      var searchBody = config.resolveSearchBody(searchParameters);\n      var request = { url: searchUrl, method: config.searchMethod, contentType: config.searchContentType, body: searchBody };\n      if (config.debugMode) {\n        onJsonResultReceived = loggedSuccess(onJsonResultReceived);\n      }\n      httpRequestJson(request, httpRequest, onJsonResultReceived, onFailure);\n    };\n  }\n\n  function loggedSuccess(onSuccess) {\n    return function (jsonResult, status) {\n      console.log(\"successful search response with code \" + status + \": \" + JSON.stringify(jsonResult, null, 2));\n      onSuccess(jsonResult, status);\n    };\n  }\n\n  /**\n   * This function will be called when a already parsed response of the HTTP request is available.\n   * @callback module:searchMenuServiceClient.HttpClient.ParsedHttpResponseAvailable\n   * @param {Object} resultData already parsed data object containing the results of the HTTP request\n   * @param {number} httpStatus HTTP response status\n   */\n  /**\n   * This function will be called when a response of the HTTP request is available as text.\n   * @callback module:searchMenuServiceClient.HttpClient.TextHttpResponseAvailable\n   * @param {Object} resultText response body as text\n   * @param {number} httpStatus HTTP response status\n   */\n  /**\n   * Executes an HTTP \"AJAX\" request.\n   *\n   * @param {Object} request - flattened json from search query result\n   * @param {string} request.url - name of the property in hierarchical order separated by points\n   * @param {string} request.method - value of the property as string\n   * @param {string} request.contentType - value of the property as string\n   * @param {string} request.body - value of the property as string\n   * @param {Object} httpRequest - Browser provided object to use for the HTTP request.\n   * @param {module:searchMenuServiceClient.HttpClient.ParsedHttpResponseAvailable} onSuccess - will be called when the request was successful.\n   * @param {module:searchMenuServiceClient.HttpClient.TextHttpResponseAvailable} onFailure - will be called with the error message as text\n   * @memberof module:searchMenuServiceClient.HttpClient\n   * @private\n   */\n  function httpRequestJson(request, httpRequest, onSuccess, onFailure) {\n    httpRequest.onreadystatechange = function () {\n      if (httpRequest.readyState === 4) {\n        if (httpRequest.status >= 200 && httpRequest.status <= 299) {\n          var jsonResult = JSON.parse(httpRequest.responseText);\n          onSuccess(jsonResult, httpRequest.status);\n        } else {\n          onFailure(httpRequest.responseText, httpRequest.status);\n        }\n      }\n    };\n    httpRequest.open(request.method, request.url, true);\n    httpRequest.setRequestHeader(\"Content-Type\", request.contentType);\n    httpRequest.send(request.body);\n  }\n\n  return instance;\n}());\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$10dc0df5987ff626$var$module","$10dc0df5987ff626$var$xmlHttpRequest","getXMLHttpRequest","XMLHttpRequest","request","status","e","console","log","ActiveXObject","$13844935e7c60f62$var$module","$13844935e7c60f62$var$datarestructorInternalCreateIfNotExists","objectToCheck","$13844935e7c60f62$var$searchMenuServiceClient","internalCreateIfNotExists","$13844935e7c60f62$var$xmlHttpRequest","HttpSearchConfig","resolveTemplate","template","parameterSourceObject","debugMode","resolvedString","jsonSearchParameters","JSON","stringify","resolvedBody","resolveVariableInTemplate","forEachFieldsIn","object","fieldNameAndValueConsumer","index","fieldName","fieldValue","fieldNames","Object","keys","length","templateString","nonWordCharactersRegEx","variableReplaceRegExp","RegExp","characters","replace","config","searchUrlTemplate","searchMethod","searchContentType","searchBodyTemplate","resolveSearchUrl","searchParameters","resolveSearchBody","httpRequest","value","build","HttpClient","search","onJsonResultReceived","onSuccess","onFailure","searchUrl","searchBody","url","method","contentType","body","jsonResult","resultText","httpStatus","error","onreadystatechange","readyState","parse","responseText","open","setRequestHeader","send"],"version":3,"file":"search-service-client.js.map","sourceRoot":"../"}
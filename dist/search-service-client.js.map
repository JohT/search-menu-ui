{"mappings":"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","sources":["src/js/search-service-client.js","src/js/ponyfills/xmlHttpRequestPonyfill.js"],"sourcesContent":["/**\n * @file Provides the (http) client/connection to the search backend service.\n * @version {@link https://github.com/JohT/search-menu-ui/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */\n\n\"use strict\";\n\nvar module = datarestructorInternalCreateIfNotExists(module); // Fallback for vanilla js without modules\n\nfunction datarestructorInternalCreateIfNotExists(objectToCheck) {\n  return objectToCheck || {};\n}\n\n/**\n * Search-Menu Service-Client.\n * It provides the (http) client/connection to the search backend service.\n * @module searchMenuServiceClient\n */\nvar searchMenuServiceClient = (module.exports = {}); // Export module for npm...\nsearchMenuServiceClient.internalCreateIfNotExists = datarestructorInternalCreateIfNotExists;\n\nvar xmlHttpRequest = xmlHttpRequest || require(\"../../src/js/ponyfills/xmlHttpRequestPonyfill\"); // supports vanilla js & npm\n\n searchMenuServiceClient.HttpSearchConfig = (function () {\n  /**\n   * Configures and builds the {@link module:searchMenuServiceClient.HttpClient}.\n   * DescribedDataField is the main element of the restructured data and therefore considered \"public\".\n   * @constructs HttpSearchConfig\n   * @alias module:searchMenuServiceClient.HttpSearchConfig\n   */\n  function HttpSearchConfig() {\n    /**\n     * HTTP Search Configuration.\n     * @property {string} searchUrlTemplate URL that is called for every search request. It may include variables in double curly brackets like `{{searchtext}}`.\n     * @property {string} [searchMethod=\"POST\"] HTTP Method, that is used for every search request.\n     * @property {string} [searchContentType=\"application/json\"] HTTP MIME-Type of the body, that is used for every search request.\n     * @property {string} searchBodyTemplate HTTP body template, that is used for every search request. It may include variables in double curly brackets like `{{jsonSearchParameters}}`.\n     * @property {XMLHttpRequest} [httpRequest=new XMLHttpRequest()] Contains the XMLHttpRequest that is used to handle HTTP requests and responses. Defaults to XMLHttpRequest.\n     * @property {boolean} [debugMode=false] Adds detailed logging for development and debugging.\n     */\n    this.config = {\n      searchUrlTemplate: \"\",\n      searchMethod: \"POST\",\n      searchContentType: \"application/json\",\n      searchBodyTemplate: null,\n      /**\n       * Resolves variables in the search url template based on the given search parameters object.\n       * The variable {{jsonSearchParameters}} will be replaced by the JSON of all search parameters.\n       * @param {Object} searchParameters object properties will be used to replace the variables of the searchUrlTemplate\n       */\n      resolveSearchUrl: function (searchParameters) {\n        return resolveTemplate(this.searchUrlTemplate, searchParameters, this.debugMode);\n      },\n      /**\n       * Resolves variables in the search body template based on the given search parameters object.\n       * The variable {{jsonSearchParameters}} will be replaced by the JSON of all search parameters.\n       * @param {Object} searchParameters object properties will be used to replace the variables of the searchBodyTemplate\n       */\n      resolveSearchBody: function (searchParameters) {\n        return resolveTemplate(this.searchBodyTemplate, searchParameters, this.debugMode);\n      },\n      httpRequest: null,\n      debugMode: false\n    };\n    /**\n     * Sets the url for the HTTP request for the search.\n     * It may include variables in double curly brackets like {{searchtext}}.\n     * @param {String} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */\n    this.searchUrlTemplate = function (value) {\n      this.config.searchUrlTemplate = value;\n      return this;\n    };\n    /**\n     * Sets the HTTP method for the search. Defaults to \"POST\".\n     * @param {String} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */\n    this.searchMethod = function (value) {\n      this.config.searchMethod = value;\n      return this;\n    };\n    /**\n     * Sets the HTTP content type of the request body. Defaults to \"application/json\".\n     * @param {String} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */\n    this.searchContentType = function (value) {\n      this.config.searchContentType = value;\n      return this;\n    };\n    /**\n     * Sets the HTTP request body template that may contain variables (e.g. {{searchParameters}}) in double curly brackets, or null if there is none.\n     * @param {String} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */\n    this.searchBodyTemplate = function (value) {\n      this.config.searchBodyTemplate = value;\n      return this;\n    };\n    /**\n     * Sets the HTTP-Request-Object. Defaults to XMLHttpRequest if not set.\n     * @param {String} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */\n    this.httpRequest = function (value) {\n      this.config.httpRequest = value;\n      return this;\n    };\n    /**\n     * Sets the debug mode, that prints some more info to the console.\n     * @param {boolean} value\n     * @return {module:searchMenuServiceClient.HttpSearchConfig}\n     */\n    this.debugMode = function (value) {\n      this.config.debugMode = value === true;\n      return this;\n    };\n    /**\n     * Uses the configuration to build the http client that provides the function \"search\" (parameters: searchParameters, onSuccess callback).\n     * @returns {module:searchMenuServiceClient.HttpClient}\n     */\n    this.build = function () {\n      if (!this.config.httpRequest) {\n        this.config.httpRequest = xmlHttpRequest.getXMLHttpRequest();\n      }\n      return new searchMenuServiceClient.HttpClient(this.config);\n    };\n  }\n\n  /**\n   * Resolves variables in the template based on the given search parameters object.\n   * The variable {{jsonSearchParameters}} will be replaced by the JSON of all search parameters.\n   * @param {String} template contains variables in double curly brackets that should be replaced by the values of the parameterSourceObject.\n   * @param {Object} parameterSourceObject object properties will be used to replace the variables of the template\n   * @param {boolean} debugMode enables/disables extended logging for debugging\n   * @memberof module:searchMenuServiceClient.HttpSearchConfig\n   * @protected\n   */\n  function resolveTemplate(template, parameterSourceObject, debugMode) {\n    if (template == null) {\n      return null;\n    }\n    var jsonSearchParameters = JSON.stringify(parameterSourceObject);\n    var resolvedBody = template;\n    resolvedBody = resolveVariableInTemplate(resolvedBody, \"jsonSearchParameters\", jsonSearchParameters);\n    resolvedBody = resolveVariablesInTemplate(resolvedBody, parameterSourceObject);\n    if (debugMode) {\n      console.log(\"template=\" + template);\n      console.log(\"{{jsonSearchParameters}}=\" + jsonSearchParameters);\n      console.log(\"resolved template=\" + resolvedBody);\n    }\n    return resolvedBody;\n  }\n\n  function resolveVariablesInTemplate(templateString, sourceDataObject) {\n    var resolvedString = templateString;\n    forEachFieldsIn(sourceDataObject, function (fieldName, fieldValue) {\n      resolvedString = resolveVariableInTemplate(resolvedString, fieldName, fieldValue);\n    });\n    return resolvedString;\n  }\n\n  function resolveVariableInTemplate(templateString, fieldName, fieldValue) {\n    //TODO could there be a better compatible solution to replace ALL occurrences instead of creating regular expressions?\n    var variableReplaceRegExp = new RegExp(\"\\\\{\\\\{\" + escapeCharsForRegEx(fieldName) + \"\\\\}\\\\}\", \"gm\");\n    return templateString.replace(variableReplaceRegExp, fieldValue);\n  }\n\n  function escapeCharsForRegEx(characters) {\n    var nonWordCharactersRegEx = new RegExp(\"([^-\\\\w])\", \"gi\");\n    return characters.replace(nonWordCharactersRegEx, \"\\\\$1\");\n  }\n\n  function forEachFieldsIn(object, fieldNameAndValueConsumer) {\n    var fieldNames = Object.keys(object);\n    var index, fieldName, fieldValue;\n    for (index = 0; index < fieldNames.length; index += 1) {\n      fieldName = fieldNames[index];\n      fieldValue = object[fieldName];\n      fieldNameAndValueConsumer(fieldName, fieldValue);\n    }\n  }\n\n  return HttpSearchConfig;\n}());\n\n/**\n * This function will be called, when search results are available.\n * @callback module:searchMenuServiceClient.HttpClient.SearchServiceResultAvailable\n * @param {Object} searchResultData already parsed data object containing the result of the search\n */\n\nsearchMenuServiceClient.HttpClient = (function () {\n  /**\n   * HttpClient.\n   *\n   * Contains the \"backend-connection\" of the search bar. It submits the search query,\n   * parses the results and informs the callback as soon as these results are available.\n   * @example new searchMenuServiceClient.HttpSearchConfig()....build();\n   * @param {module:searchMenuServiceClient.HttpSearchConfig} config \n   * @constructs HttpClient\n   * @alias module:searchMenuServiceClient.HttpClient\n   */\n  var instance = function (config) {\n    /**\n     * Configuration for the search HTTP requests.\n     * @type {module:searchMenuServiceClient.HttpSearchConfig}\n     */\n    this.config = config;\n    /**\n     * This function will be called to trigger search (calling the search backend).\n     * @function\n     * @param {Object} searchParameters object that contains all parameters as properties. It will be converted to JSON.\n     * @param {module:searchMenuServiceClient.HttpClient.SearchServiceResultAvailable} onSearchResultsAvailable will be called when search results are available.\n     */\n    this.search = createSearchFunction(this.config, this.config.httpRequest);\n  };\n\n  /**\n   * Creates the search service function that can be bound to the search menu.\n   * @param {module:searchMenuServiceClient.HttpSearchConfig} config Configuration for the search HTTP requests.\n   * @param {XMLHttpRequest} httpRequest Takes the HTTP-Request-Object.\n   * @returns {module:searchMenuServiceClient.SearchService}\n   * @memberof module:searchMenuServiceClient.HttpClient\n   * @private\n   */\n  function createSearchFunction(config, httpRequest) {\n    return function (searchParameters, onJsonResultReceived) {\n      var onFailure = function (resultText, httpStatus) {\n        console.error(\"search failed with status code \" + httpStatus + \": \" + resultText);\n      };\n      var searchUrl = config.resolveSearchUrl(searchParameters);\n      var searchBody = config.resolveSearchBody(searchParameters);\n      var request = { url: searchUrl, method: config.searchMethod, contentType: config.searchContentType, body: searchBody };\n      if (config.debugMode) {\n        onJsonResultReceived = loggedSuccess(onJsonResultReceived);\n      }\n      httpRequestJson(request, httpRequest, onJsonResultReceived, onFailure);\n    };\n  }\n\n  function loggedSuccess(onSuccess) {\n    return function (jsonResult, status) {\n      console.log(\"successful search response with code \" + status + \": \" + JSON.stringify(jsonResult, null, 2));\n      onSuccess(jsonResult, status);\n    };\n  }\n\n  /**\n   * This function will be called when a already parsed response of the HTTP request is available.\n   * @callback module:searchMenuServiceClient.HttpClient.ParsedHttpResponseAvailable\n   * @param {Object} resultData already parsed data object containing the results of the HTTP request\n   * @param {number} httpStatus HTTP response status\n   */\n  /**\n   * This function will be called when a response of the HTTP request is available as text.\n   * @callback module:searchMenuServiceClient.HttpClient.TextHttpResponseAvailable\n   * @param {Object} resultText response body as text\n   * @param {number} httpStatus HTTP response status\n   */\n  /**\n   * Executes an HTTP \"AJAX\" request.\n   *\n   * @param {Object} request - flattened json from search query result\n   * @param {string} request.url - name of the property in hierarchical order separated by points\n   * @param {string} request.method - value of the property as string\n   * @param {string} request.contentType - value of the property as string\n   * @param {string} request.body - value of the property as string\n   * @param {Object} httpRequest - Browser provided object to use for the HTTP request.\n   * @param {module:searchMenuServiceClient.HttpClient.ParsedHttpResponseAvailable} onSuccess - will be called when the request was successful.\n   * @param {module:searchMenuServiceClient.HttpClient.TextHttpResponseAvailable} onFailure - will be called with the error message as text\n   * @memberof module:searchMenuServiceClient.HttpClient\n   * @private\n   */\n  function httpRequestJson(request, httpRequest, onSuccess, onFailure) {\n    httpRequest.onreadystatechange = function () {\n      if (httpRequest.readyState === 4) {\n        if (httpRequest.status >= 200 && httpRequest.status <= 299) {\n          var jsonResult = JSON.parse(httpRequest.responseText);\n          onSuccess(jsonResult, httpRequest.status);\n        } else {\n          onFailure(httpRequest.responseText, httpRequest.status);\n        }\n      }\n    };\n    httpRequest.open(request.method, request.url, true);\n    httpRequest.setRequestHeader(\"Content-Type\", request.contentType);\n    httpRequest.send(request.body);\n  }\n\n  return instance;\n}());\n","\"use strict\";\n\nvar module = module || {}; // Fallback for vanilla js without modules\n/**\n * @namespace xmlHttpRequest\n */\nvar xmlHttpRequest = module.exports={}; // Fallback for vanilla js without modules\n\n/**\n * Provide the XMLHttpRequest constructor for Internet Explorer 5.x-6.x:\n * Other browsers (including Internet Explorer 7.x-9.x) do not redefine\n * XMLHttpRequest if it already exists.\n *\n * This example is based on findings at:\n * http://blogs.msdn.com/xmlteam/archive/2006/10/23/using-the-right-version-of-msxml-in-internet-explorer.aspx\n * @returns {XMLHttpRequest}\n * @memberof xmlHttpRequest\n */\n xmlHttpRequest.getXMLHttpRequest = function () {\n  if (typeof XMLHttpRequest !== \"undefined\") {\n    try {\n      var request = new XMLHttpRequest();\n      request.status; //try, if status is accessible. Fails in IE5.\n      return request;\n    } catch (e) {\n      console.log(\"XMLHttpRequest not available: \" + e);\n    }\n  }\n  try {\n    return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\");\n  } catch (e) {\n    console.log(\"XMLHttpRequest Msxml2.XMLHTTP.6.0 not available: \" + e);\n  }\n  try {\n    return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\");\n  } catch (e) {\n    console.log(\"XMLHttpRequest Msxml2.XMLHTTP.3.0 not available: \" + e);\n  }\n  try {\n    return new ActiveXObject(\"Microsoft.XMLHTTP\");\n  } catch (e) {\n    console.log(\"XMLHttpRequest Microsoft.XMLHTTP not available: \" + e);\n  }\n  // Microsoft.XMLHTTP points to Msxml2.XMLHTTP and is redundant\n  throw new Error(\"This browser does not support XMLHttpRequest.\");\n};\n"],"names":["$76da0cd29a67a75b$var$module","$76da0cd29a67a75b$var$datarestructorInternalCreateIfNotExists","objectToCheck","$76da0cd29a67a75b$var$searchMenuServiceClient","exports","internalCreateIfNotExists","$f4741aa9316a1a88$var$module","getXMLHttpRequest","XMLHttpRequest","request","status","e","console","log","ActiveXObject","Error","$76da0cd29a67a75b$var$xmlHttpRequest","parcelRequire","HttpSearchConfig","resolveTemplate","template","parameterSourceObject","debugMode","resolvedString","jsonSearchParameters","JSON","stringify","resolvedBody","resolveVariableInTemplate","object","fieldNameAndValueConsumer","index","fieldName","fieldNames","Object","keys","length","forEachFieldsIn","fieldValue","templateString","characters","nonWordCharactersRegEx","variableReplaceRegExp","RegExp","replace","this","config","searchUrlTemplate","searchMethod","searchContentType","searchBodyTemplate","resolveSearchUrl","searchParameters","resolveSearchBody","httpRequest","value","build","HttpClient","search","onJsonResultReceived","onSuccess","onFailure","resultText","httpStatus","error","searchUrl","searchBody","url","method","contentType","body","jsonResult","onreadystatechange","readyState","parse","responseText","open","setRequestHeader","send","httpRequestJson","createSearchFunction"],"version":3,"file":"search-service-client.js.map","sourceRoot":"../"}